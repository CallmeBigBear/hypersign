syntax = "proto3";
package hypersignprotocol.hidnode.ssi;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "ssi/params.proto";
import "ssi/schema.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/hypersign-protocol/hid-node/x/ssi/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/hypersignprotocol/hidnode/ssi/params";
  }
  // Queries a list of GetSchema items.
	rpc GetSchema(QueryGetSchemaRequest) returns (QueryGetSchemaResponse) {
		option (google.api.http).get = "/hypersign-protocol/hidnode/ssi/schema/querySchemaById/{schemaId}";
	}

// Queries a list of Schemas items.
	rpc Schemas(QuerySchemasRequest) returns (QuerySchemasResponse) {
		option (google.api.http).get = "/hypersign-protocol/hidnode/ssi/schema/schemas";
	}

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetSchemaRequest {
  string schemaId = 1;
}

message QueryGetSchemaResponse {
  Schema schema = 1;
}

message QuerySchemasRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QuerySchemasResponse {
  repeated Schema schemaList = 1;
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// this line is used by starport scaffolding # 3
