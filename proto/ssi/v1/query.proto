syntax = "proto3";
package hypersignprotocol.hidnode.ssi;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "ssi/v1/params.proto";
import "ssi/v1/schema.proto";
import "ssi/v1/did.proto";
import "ssi/v1/tx.proto";
// this line is used by starport scaffolding # 1

option go_package = "github.com/hypersign-protocol/hid-node/x/ssi/types";

// Query defines the gRPC querier service.
service Query {
  // Parameters queries the parameters of the module.
  rpc Params(QueryParamsRequest) returns (QueryParamsResponse) {
    option (google.api.http).get = "/hypersignprotocol/hidnode/ssi/params";
  }
  // Queries a list of GetSchema items.
	rpc GetSchema(QueryGetSchemaRequest) returns (QueryGetSchemaResponse) {
		option (google.api.http).get = "/hypersign-protocol/hidnode/ssi/schema/{schemaId}";
	}

// Schema Param
	rpc SchemaParam(QuerySchemaParamRequest) returns (QuerySchemaParamResponse) {
		option (google.api.http).get = "/hypersign-protocol/hidnode/ssi/schema";
	}

// Resolve DID
	rpc ResolveDid(QueryGetDidDocByIdRequest) returns (QueryGetDidDocByIdResponse) {
		option (google.api.http).get = "/hypersign-protocol/hidnode/ssi/did/{didId}";
	}

// Did Param
  rpc DidParam(QueryDidParamRequest) returns (QueryDidParamResponse) {
    option (google.api.http).get = "/hypersign-protocol/hidnode/ssi/did";
  }

// TEMPORARY (NOT TO BE USED): This Query Service takes strings as an input, and returns Unmarshalled output
  rpc TempUnmarshal(MarshalInput) returns (MarshalOutput) {
    option (google.api.http) = {
      post: "/hypersign-protocol/hidnode/ssi/unmarshal"
      body: "*"
    };
  } 

// this line is used by starport scaffolding # 2
}

// QueryParamsRequest is request type for the Query/Params RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the Query/Params RPC method.
message QueryParamsResponse {
  // params holds all the parameters of this module.
  Params params = 1 [(gogoproto.nullable) = false];
}

message QueryGetSchemaRequest {
  string schemaId = 1;
}

message QueryGetSchemaResponse {
  repeated Schema schema = 1;
}

message QuerySchemaParamRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

message QuerySchemaParamResponse {
  uint64 totalCount = 1;
  repeated Schema schemaList = 2;
}

message QueryGetDidDocByIdRequest {
  string didId = 1;
  string versionId = 2;
}

message QueryGetDidDocByIdResponse {
  string _at_context = 1;
  Did didDocument = 2;
  Metadata didDocumentMetadata = 3;
  DidResolveMeta didResolutionMetadata = 4;
}


message QueryDidParamRequest {
  bool count = 1;
  cosmos.base.query.v1beta1.PageRequest pagination = 2;
}

message QueryDidParamResponse {
  uint64 totalDidCount = 1;
  repeated DidResolutionResponse didDocList = 2;
}

message DidResolutionResponse {
  string _at_context = 1;
  Did didDocument = 2;
  Metadata didDocumentMetadata = 3;
  DidResolveMeta didResolutionMetadata = 4;
}

message MarshalInput {
  string stringInput = 1;
}

message MarshalOutput {
  string unmarshalOutput = 1;
}

// this line is used by starport scaffolding # 3
