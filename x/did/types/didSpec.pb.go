// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: did/didSpec.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DidSpec struct {
	Creator      string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Id           uint64 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Did          string `protobuf:"bytes,3,opt,name=did,proto3" json:"did,omitempty"`
	DidDocString string `protobuf:"bytes,4,opt,name=didDocString,proto3" json:"didDocString,omitempty"`
	CreatedAt    string `protobuf:"bytes,5,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
}

func (m *DidSpec) Reset()         { *m = DidSpec{} }
func (m *DidSpec) String() string { return proto.CompactTextString(m) }
func (*DidSpec) ProtoMessage()    {}
func (*DidSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_7dd80e907451f7ec, []int{0}
}
func (m *DidSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DidSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DidSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DidSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DidSpec.Merge(m, src)
}
func (m *DidSpec) XXX_Size() int {
	return m.Size()
}
func (m *DidSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_DidSpec.DiscardUnknown(m)
}

var xxx_messageInfo_DidSpec proto.InternalMessageInfo

func (m *DidSpec) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *DidSpec) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *DidSpec) GetDid() string {
	if m != nil {
		return m.Did
	}
	return ""
}

func (m *DidSpec) GetDidDocString() string {
	if m != nil {
		return m.DidDocString
	}
	return ""
}

func (m *DidSpec) GetCreatedAt() string {
	if m != nil {
		return m.CreatedAt
	}
	return ""
}

func init() {
	proto.RegisterType((*DidSpec)(nil), "hypersignprotocol.hidnode.did.DidSpec")
}

func init() { proto.RegisterFile("did/didSpec.proto", fileDescriptor_7dd80e907451f7ec) }

var fileDescriptor_7dd80e907451f7ec = []byte{
	// 232 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x8f, 0x3f, 0x4b, 0x03, 0x31,
	0x18, 0xc6, 0x2f, 0xd7, 0x6a, 0x69, 0x10, 0xd1, 0x4c, 0x19, 0x34, 0x94, 0x4e, 0x5d, 0x7a, 0x01,
	0xfd, 0x04, 0x4a, 0x47, 0xa7, 0x76, 0x73, 0xb3, 0x79, 0xc2, 0xe5, 0x05, 0xbd, 0x84, 0x34, 0x82,
	0xfd, 0x04, 0xae, 0x7e, 0x2c, 0xc7, 0x8e, 0x8e, 0x72, 0xf7, 0x45, 0xe4, 0x22, 0xa7, 0x74, 0x7b,
	0x9f, 0x3f, 0xef, 0x03, 0x3f, 0x7e, 0x09, 0x82, 0x06, 0x61, 0x13, 0xac, 0xa9, 0x42, 0xf4, 0xc9,
	0x8b, 0x6b, 0xb7, 0x0f, 0x36, 0xee, 0xa8, 0x6e, 0xb2, 0x36, 0xfe, 0xb9, 0x72, 0x84, 0xc6, 0xc3,
	0x56, 0x20, 0xcc, 0xdf, 0x19, 0x9f, 0xac, 0x7e, 0x1f, 0x84, 0xe4, 0x13, 0x13, 0xed, 0x53, 0xf2,
	0x51, 0xb2, 0x19, 0x5b, 0x4c, 0xd7, 0x83, 0x14, 0xe7, 0xbc, 0x24, 0xc8, 0x72, 0xc6, 0x16, 0xe3,
	0x75, 0x49, 0x10, 0x17, 0x7c, 0x04, 0x82, 0x1c, 0xe5, 0x56, 0x7f, 0x8a, 0x39, 0x3f, 0x03, 0x61,
	0xe5, 0xcd, 0x26, 0x45, 0x6a, 0x6a, 0x39, 0xce, 0xd1, 0x91, 0x27, 0xae, 0xf8, 0x34, 0x0f, 0x5a,
	0xdc, 0x25, 0x79, 0x92, 0x0b, 0xff, 0xc6, 0xfd, 0xc3, 0x67, 0xab, 0xd8, 0xa1, 0x55, 0xec, 0xbb,
	0x55, 0xec, 0xa3, 0x53, 0xc5, 0xa1, 0x53, 0xc5, 0x57, 0xa7, 0x8a, 0xc7, 0x9b, 0x9a, 0x92, 0x7b,
	0xdd, 0x56, 0xc6, 0xbf, 0xe8, 0x3f, 0x9a, 0xe5, 0x80, 0xa3, 0x1d, 0x61, 0xd9, 0xf3, 0xe8, 0xb7,
	0x1e, 0x5d, 0xa7, 0x7d, 0xb0, 0xbb, 0xed, 0x69, 0x8e, 0x6f, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff,
	0x19, 0xa0, 0x22, 0xd0, 0x12, 0x01, 0x00, 0x00,
}

func (m *DidSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DidSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DidSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CreatedAt) > 0 {
		i -= len(m.CreatedAt)
		copy(dAtA[i:], m.CreatedAt)
		i = encodeVarintDidSpec(dAtA, i, uint64(len(m.CreatedAt)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.DidDocString) > 0 {
		i -= len(m.DidDocString)
		copy(dAtA[i:], m.DidDocString)
		i = encodeVarintDidSpec(dAtA, i, uint64(len(m.DidDocString)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Did) > 0 {
		i -= len(m.Did)
		copy(dAtA[i:], m.Did)
		i = encodeVarintDidSpec(dAtA, i, uint64(len(m.Did)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintDidSpec(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintDidSpec(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintDidSpec(dAtA []byte, offset int, v uint64) int {
	offset -= sovDidSpec(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DidSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovDidSpec(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovDidSpec(uint64(m.Id))
	}
	l = len(m.Did)
	if l > 0 {
		n += 1 + l + sovDidSpec(uint64(l))
	}
	l = len(m.DidDocString)
	if l > 0 {
		n += 1 + l + sovDidSpec(uint64(l))
	}
	l = len(m.CreatedAt)
	if l > 0 {
		n += 1 + l + sovDidSpec(uint64(l))
	}
	return n
}

func sovDidSpec(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozDidSpec(x uint64) (n int) {
	return sovDidSpec(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DidSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowDidSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DidSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DidSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDidSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDidSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDidSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDidSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Did = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DidDocString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDidSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDidSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DidDocString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowDidSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthDidSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthDidSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CreatedAt = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipDidSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthDidSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipDidSpec(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowDidSpec
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDidSpec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowDidSpec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthDidSpec
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupDidSpec
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthDidSpec
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthDidSpec        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowDidSpec          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupDidSpec = fmt.Errorf("proto: unexpected end of group")
)
