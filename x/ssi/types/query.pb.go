// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ssi/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryCredentialRequest struct {
	CredId string `protobuf:"bytes,1,opt,name=credId,proto3" json:"credId,omitempty"`
}

func (m *QueryCredentialRequest) Reset()         { *m = QueryCredentialRequest{} }
func (m *QueryCredentialRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCredentialRequest) ProtoMessage()    {}
func (*QueryCredentialRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f525f26163d85f3, []int{0}
}
func (m *QueryCredentialRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCredentialRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCredentialRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCredentialRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCredentialRequest.Merge(m, src)
}
func (m *QueryCredentialRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCredentialRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCredentialRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCredentialRequest proto.InternalMessageInfo

func (m *QueryCredentialRequest) GetCredId() string {
	if m != nil {
		return m.CredId
	}
	return ""
}

type QueryCredentialResponse struct {
	CredStatus *Credential `protobuf:"bytes,1,opt,name=credStatus,proto3" json:"credStatus,omitempty"`
}

func (m *QueryCredentialResponse) Reset()         { *m = QueryCredentialResponse{} }
func (m *QueryCredentialResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCredentialResponse) ProtoMessage()    {}
func (*QueryCredentialResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f525f26163d85f3, []int{1}
}
func (m *QueryCredentialResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCredentialResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCredentialResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCredentialResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCredentialResponse.Merge(m, src)
}
func (m *QueryCredentialResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCredentialResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCredentialResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCredentialResponse proto.InternalMessageInfo

func (m *QueryCredentialResponse) GetCredStatus() *Credential {
	if m != nil {
		return m.CredStatus
	}
	return nil
}

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f525f26163d85f3, []int{2}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f525f26163d85f3, []int{3}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetSchemaRequest struct {
	SchemaId string `protobuf:"bytes,1,opt,name=schemaId,proto3" json:"schemaId,omitempty"`
}

func (m *QueryGetSchemaRequest) Reset()         { *m = QueryGetSchemaRequest{} }
func (m *QueryGetSchemaRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSchemaRequest) ProtoMessage()    {}
func (*QueryGetSchemaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f525f26163d85f3, []int{4}
}
func (m *QueryGetSchemaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSchemaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSchemaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSchemaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSchemaRequest.Merge(m, src)
}
func (m *QueryGetSchemaRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSchemaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSchemaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSchemaRequest proto.InternalMessageInfo

func (m *QueryGetSchemaRequest) GetSchemaId() string {
	if m != nil {
		return m.SchemaId
	}
	return ""
}

type QueryGetSchemaResponse struct {
	Schema *Schema `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
}

func (m *QueryGetSchemaResponse) Reset()         { *m = QueryGetSchemaResponse{} }
func (m *QueryGetSchemaResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSchemaResponse) ProtoMessage()    {}
func (*QueryGetSchemaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f525f26163d85f3, []int{5}
}
func (m *QueryGetSchemaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSchemaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSchemaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSchemaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSchemaResponse.Merge(m, src)
}
func (m *QueryGetSchemaResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSchemaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSchemaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSchemaResponse proto.InternalMessageInfo

func (m *QueryGetSchemaResponse) GetSchema() *Schema {
	if m != nil {
		return m.Schema
	}
	return nil
}

type QuerySchemaParamRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QuerySchemaParamRequest) Reset()         { *m = QuerySchemaParamRequest{} }
func (m *QuerySchemaParamRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySchemaParamRequest) ProtoMessage()    {}
func (*QuerySchemaParamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f525f26163d85f3, []int{6}
}
func (m *QuerySchemaParamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySchemaParamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySchemaParamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySchemaParamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySchemaParamRequest.Merge(m, src)
}
func (m *QuerySchemaParamRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySchemaParamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySchemaParamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySchemaParamRequest proto.InternalMessageInfo

func (m *QuerySchemaParamRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QuerySchemaParamResponse struct {
	TotalCount uint64    `protobuf:"varint,1,opt,name=totalCount,proto3" json:"totalCount,omitempty"`
	SchemaList []*Schema `protobuf:"bytes,2,rep,name=schemaList,proto3" json:"schemaList,omitempty"`
}

func (m *QuerySchemaParamResponse) Reset()         { *m = QuerySchemaParamResponse{} }
func (m *QuerySchemaParamResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySchemaParamResponse) ProtoMessage()    {}
func (*QuerySchemaParamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f525f26163d85f3, []int{7}
}
func (m *QuerySchemaParamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySchemaParamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySchemaParamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySchemaParamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySchemaParamResponse.Merge(m, src)
}
func (m *QuerySchemaParamResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySchemaParamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySchemaParamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySchemaParamResponse proto.InternalMessageInfo

func (m *QuerySchemaParamResponse) GetTotalCount() uint64 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *QuerySchemaParamResponse) GetSchemaList() []*Schema {
	if m != nil {
		return m.SchemaList
	}
	return nil
}

type QueryGetDidDocByIdRequest struct {
	DidId string `protobuf:"bytes,1,opt,name=didId,proto3" json:"didId,omitempty"`
}

func (m *QueryGetDidDocByIdRequest) Reset()         { *m = QueryGetDidDocByIdRequest{} }
func (m *QueryGetDidDocByIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetDidDocByIdRequest) ProtoMessage()    {}
func (*QueryGetDidDocByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f525f26163d85f3, []int{8}
}
func (m *QueryGetDidDocByIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDidDocByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDidDocByIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDidDocByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDidDocByIdRequest.Merge(m, src)
}
func (m *QueryGetDidDocByIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDidDocByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDidDocByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDidDocByIdRequest proto.InternalMessageInfo

func (m *QueryGetDidDocByIdRequest) GetDidId() string {
	if m != nil {
		return m.DidId
	}
	return ""
}

type QueryDidParamRequest struct {
	Count      bool               `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Pagination *query.PageRequest `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDidParamRequest) Reset()         { *m = QueryDidParamRequest{} }
func (m *QueryDidParamRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDidParamRequest) ProtoMessage()    {}
func (*QueryDidParamRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f525f26163d85f3, []int{9}
}
func (m *QueryDidParamRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDidParamRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDidParamRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDidParamRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDidParamRequest.Merge(m, src)
}
func (m *QueryDidParamRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDidParamRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDidParamRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDidParamRequest proto.InternalMessageInfo

func (m *QueryDidParamRequest) GetCount() bool {
	if m != nil {
		return m.Count
	}
	return false
}

func (m *QueryDidParamRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryDidParamResponse struct {
	TotalDidCount uint64                   `protobuf:"varint,1,opt,name=totalDidCount,proto3" json:"totalDidCount,omitempty"`
	DidDocList    []*DidResolutionResponse `protobuf:"bytes,2,rep,name=didDocList,proto3" json:"didDocList,omitempty"`
}

func (m *QueryDidParamResponse) Reset()         { *m = QueryDidParamResponse{} }
func (m *QueryDidParamResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDidParamResponse) ProtoMessage()    {}
func (*QueryDidParamResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f525f26163d85f3, []int{10}
}
func (m *QueryDidParamResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDidParamResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDidParamResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDidParamResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDidParamResponse.Merge(m, src)
}
func (m *QueryDidParamResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDidParamResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDidParamResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDidParamResponse proto.InternalMessageInfo

func (m *QueryDidParamResponse) GetTotalDidCount() uint64 {
	if m != nil {
		return m.TotalDidCount
	}
	return 0
}

func (m *QueryDidParamResponse) GetDidDocList() []*DidResolutionResponse {
	if m != nil {
		return m.DidDocList
	}
	return nil
}

type DidResolutionResponse struct {
	DidDocument         *Did      `protobuf:"bytes,1,opt,name=didDocument,proto3" json:"didDocument,omitempty"`
	DidDocumentMetadata *Metadata `protobuf:"bytes,2,opt,name=didDocumentMetadata,proto3" json:"didDocumentMetadata,omitempty"`
}

func (m *DidResolutionResponse) Reset()         { *m = DidResolutionResponse{} }
func (m *DidResolutionResponse) String() string { return proto.CompactTextString(m) }
func (*DidResolutionResponse) ProtoMessage()    {}
func (*DidResolutionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f525f26163d85f3, []int{11}
}
func (m *DidResolutionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DidResolutionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DidResolutionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DidResolutionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DidResolutionResponse.Merge(m, src)
}
func (m *DidResolutionResponse) XXX_Size() int {
	return m.Size()
}
func (m *DidResolutionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DidResolutionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DidResolutionResponse proto.InternalMessageInfo

func (m *DidResolutionResponse) GetDidDocument() *Did {
	if m != nil {
		return m.DidDocument
	}
	return nil
}

func (m *DidResolutionResponse) GetDidDocumentMetadata() *Metadata {
	if m != nil {
		return m.DidDocumentMetadata
	}
	return nil
}

type QueryCredentialsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryCredentialsRequest) Reset()         { *m = QueryCredentialsRequest{} }
func (m *QueryCredentialsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCredentialsRequest) ProtoMessage()    {}
func (*QueryCredentialsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f525f26163d85f3, []int{12}
}
func (m *QueryCredentialsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCredentialsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCredentialsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCredentialsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCredentialsRequest.Merge(m, src)
}
func (m *QueryCredentialsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCredentialsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCredentialsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCredentialsRequest proto.InternalMessageInfo

func (m *QueryCredentialsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryCredentialsResponse struct {
	TotalCount  uint64        `protobuf:"varint,1,opt,name=totalCount,proto3" json:"totalCount,omitempty"`
	Credentials []*Credential `protobuf:"bytes,2,rep,name=credentials,proto3" json:"credentials,omitempty"`
}

func (m *QueryCredentialsResponse) Reset()         { *m = QueryCredentialsResponse{} }
func (m *QueryCredentialsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCredentialsResponse) ProtoMessage()    {}
func (*QueryCredentialsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f525f26163d85f3, []int{13}
}
func (m *QueryCredentialsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCredentialsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCredentialsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCredentialsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCredentialsResponse.Merge(m, src)
}
func (m *QueryCredentialsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCredentialsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCredentialsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCredentialsResponse proto.InternalMessageInfo

func (m *QueryCredentialsResponse) GetTotalCount() uint64 {
	if m != nil {
		return m.TotalCount
	}
	return 0
}

func (m *QueryCredentialsResponse) GetCredentials() []*Credential {
	if m != nil {
		return m.Credentials
	}
	return nil
}

type MarshalInput struct {
	StringInput string `protobuf:"bytes,1,opt,name=stringInput,proto3" json:"stringInput,omitempty"`
}

func (m *MarshalInput) Reset()         { *m = MarshalInput{} }
func (m *MarshalInput) String() string { return proto.CompactTextString(m) }
func (*MarshalInput) ProtoMessage()    {}
func (*MarshalInput) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f525f26163d85f3, []int{14}
}
func (m *MarshalInput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MarshalInput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MarshalInput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MarshalInput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarshalInput.Merge(m, src)
}
func (m *MarshalInput) XXX_Size() int {
	return m.Size()
}
func (m *MarshalInput) XXX_DiscardUnknown() {
	xxx_messageInfo_MarshalInput.DiscardUnknown(m)
}

var xxx_messageInfo_MarshalInput proto.InternalMessageInfo

func (m *MarshalInput) GetStringInput() string {
	if m != nil {
		return m.StringInput
	}
	return ""
}

type MarshalOutput struct {
	UnmarshalOutput string `protobuf:"bytes,1,opt,name=unmarshalOutput,proto3" json:"unmarshalOutput,omitempty"`
}

func (m *MarshalOutput) Reset()         { *m = MarshalOutput{} }
func (m *MarshalOutput) String() string { return proto.CompactTextString(m) }
func (*MarshalOutput) ProtoMessage()    {}
func (*MarshalOutput) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f525f26163d85f3, []int{15}
}
func (m *MarshalOutput) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MarshalOutput) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MarshalOutput.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MarshalOutput) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MarshalOutput.Merge(m, src)
}
func (m *MarshalOutput) XXX_Size() int {
	return m.Size()
}
func (m *MarshalOutput) XXX_DiscardUnknown() {
	xxx_messageInfo_MarshalOutput.DiscardUnknown(m)
}

var xxx_messageInfo_MarshalOutput proto.InternalMessageInfo

func (m *MarshalOutput) GetUnmarshalOutput() string {
	if m != nil {
		return m.UnmarshalOutput
	}
	return ""
}

func init() {
	proto.RegisterType((*QueryCredentialRequest)(nil), "hypersignprotocol.hidnode.ssi.QueryCredentialRequest")
	proto.RegisterType((*QueryCredentialResponse)(nil), "hypersignprotocol.hidnode.ssi.QueryCredentialResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "hypersignprotocol.hidnode.ssi.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "hypersignprotocol.hidnode.ssi.QueryParamsResponse")
	proto.RegisterType((*QueryGetSchemaRequest)(nil), "hypersignprotocol.hidnode.ssi.QueryGetSchemaRequest")
	proto.RegisterType((*QueryGetSchemaResponse)(nil), "hypersignprotocol.hidnode.ssi.QueryGetSchemaResponse")
	proto.RegisterType((*QuerySchemaParamRequest)(nil), "hypersignprotocol.hidnode.ssi.QuerySchemaParamRequest")
	proto.RegisterType((*QuerySchemaParamResponse)(nil), "hypersignprotocol.hidnode.ssi.QuerySchemaParamResponse")
	proto.RegisterType((*QueryGetDidDocByIdRequest)(nil), "hypersignprotocol.hidnode.ssi.QueryGetDidDocByIdRequest")
	proto.RegisterType((*QueryDidParamRequest)(nil), "hypersignprotocol.hidnode.ssi.QueryDidParamRequest")
	proto.RegisterType((*QueryDidParamResponse)(nil), "hypersignprotocol.hidnode.ssi.QueryDidParamResponse")
	proto.RegisterType((*DidResolutionResponse)(nil), "hypersignprotocol.hidnode.ssi.DidResolutionResponse")
	proto.RegisterType((*QueryCredentialsRequest)(nil), "hypersignprotocol.hidnode.ssi.QueryCredentialsRequest")
	proto.RegisterType((*QueryCredentialsResponse)(nil), "hypersignprotocol.hidnode.ssi.QueryCredentialsResponse")
	proto.RegisterType((*MarshalInput)(nil), "hypersignprotocol.hidnode.ssi.MarshalInput")
	proto.RegisterType((*MarshalOutput)(nil), "hypersignprotocol.hidnode.ssi.MarshalOutput")
}

func init() { proto.RegisterFile("ssi/v1/query.proto", fileDescriptor_0f525f26163d85f3) }

var fileDescriptor_0f525f26163d85f3 = []byte{
	// 932 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0xc1, 0x6f, 0x1b, 0x45,
	0x14, 0xc6, 0xb3, 0xa1, 0xb1, 0x92, 0x67, 0xaa, 0x54, 0x13, 0xb7, 0x0d, 0x2b, 0x30, 0xd1, 0x40,
	0xda, 0xd0, 0x92, 0xdd, 0xda, 0x4e, 0x0b, 0x15, 0xe2, 0x92, 0x18, 0x50, 0x44, 0x2b, 0xca, 0x16,
	0x09, 0xd1, 0xdb, 0xc4, 0x33, 0x5a, 0x8f, 0x64, 0xef, 0xb8, 0x9e, 0xd9, 0xa8, 0x51, 0x94, 0x03,
	0x5c, 0xb8, 0x22, 0xf5, 0xce, 0x81, 0x3f, 0x00, 0x09, 0x71, 0x80, 0x0b, 0xf7, 0x1e, 0x2b, 0x71,
	0xe1, 0x84, 0x50, 0xc2, 0x1f, 0x82, 0x3c, 0xf3, 0xd6, 0xde, 0xd8, 0x06, 0xaf, 0x23, 0x6e, 0x99,
	0x37, 0xf3, 0xcd, 0xfb, 0xcd, 0x97, 0xe7, 0xcf, 0x06, 0xa2, 0xb5, 0x0c, 0x0f, 0x6b, 0xe1, 0xd3,
	0x54, 0xf4, 0x8f, 0x82, 0x5e, 0x5f, 0x19, 0x45, 0xde, 0x68, 0x1f, 0xf5, 0x44, 0x5f, 0xcb, 0x38,
	0xb1, 0xeb, 0x96, 0xea, 0x04, 0x6d, 0xc9, 0x13, 0xc5, 0x45, 0xa0, 0xb5, 0xf4, 0x2b, 0xb1, 0x8a,
	0x95, 0xdd, 0x09, 0x07, 0x7f, 0x39, 0x91, 0xff, 0x7a, 0xac, 0x54, 0xdc, 0x11, 0x21, 0xeb, 0xc9,
	0x90, 0x25, 0x89, 0x32, 0xcc, 0x48, 0x95, 0x68, 0xdc, 0xbd, 0xd5, 0x52, 0xba, 0xab, 0x74, 0x78,
	0xc0, 0xb4, 0x70, 0xbd, 0xc2, 0xc3, 0xda, 0x81, 0x30, 0xac, 0x16, 0xf6, 0x58, 0x2c, 0x13, 0x7b,
	0x18, 0xcf, 0xae, 0x21, 0x52, 0x8f, 0xf5, 0x59, 0x57, 0x8f, 0x15, 0x75, 0xab, 0x2d, 0xba, 0x0c,
	0x8b, 0x57, 0xb0, 0xc8, 0x25, 0xc7, 0xca, 0x2a, 0x56, 0xcc, 0x33, 0x2c, 0x5c, 0xc7, 0x42, 0xab,
	0x2f, 0xb8, 0x48, 0x8c, 0x64, 0x1d, 0xb7, 0x41, 0xef, 0xc0, 0xb5, 0xcf, 0x07, 0x1c, 0x7b, 0xc3,
	0x8d, 0x48, 0x3c, 0x4d, 0x85, 0x36, 0xe4, 0x1a, 0x94, 0x06, 0xa7, 0xf7, 0xf9, 0xba, 0xb7, 0xe1,
	0x6d, 0xad, 0x44, 0xb8, 0xa2, 0x1c, 0xae, 0x4f, 0x28, 0x74, 0x4f, 0x25, 0x5a, 0x90, 0x7d, 0x80,
	0xc1, 0xa1, 0xc7, 0x86, 0x99, 0x54, 0x5b, 0x59, 0xb9, 0xfe, 0x4e, 0xf0, 0x9f, 0x36, 0x06, 0xb9,
	0x6b, 0x72, 0x62, 0x5a, 0x01, 0x62, 0xbb, 0x3c, 0xb2, 0xaf, 0x47, 0x26, 0xfa, 0x04, 0xd6, 0xce,
	0x55, 0xb1, 0xef, 0x1e, 0x94, 0x9c, 0x4b, 0xd8, 0x73, 0x73, 0x46, 0x4f, 0x27, 0xdf, 0xbd, 0xf4,
	0xe2, 0xcf, 0x37, 0x17, 0x22, 0x94, 0xd2, 0x06, 0x5c, 0xb5, 0x77, 0x7f, 0x22, 0xcc, 0x63, 0xeb,
	0x6e, 0x66, 0x84, 0x0f, 0xcb, 0xce, 0xee, 0xa1, 0x15, 0xc3, 0x35, 0xfd, 0x12, 0xed, 0xcb, 0x89,
	0x90, 0xe9, 0x43, 0x28, 0xb9, 0x53, 0x05, 0x99, 0x50, 0x8e, 0x22, 0xca, 0xd0, 0x65, 0x57, 0xb6,
	0xc0, 0x19, 0xcf, 0xc7, 0x00, 0xa3, 0x61, 0xc1, 0xdb, 0x6f, 0x04, 0x6e, 0xb2, 0x82, 0xc1, 0x64,
	0x05, 0x6e, 0x8a, 0x71, 0xb2, 0x82, 0x47, 0x2c, 0x16, 0xa8, 0x8d, 0x72, 0x4a, 0xfa, 0xb5, 0x07,
	0xeb, 0x93, 0x3d, 0x10, 0xbf, 0x0a, 0x60, 0x94, 0x61, 0x9d, 0x3d, 0x95, 0x26, 0xc6, 0x36, 0xb9,
	0x14, 0xe5, 0x2a, 0xe4, 0x23, 0x00, 0x47, 0xfa, 0x40, 0x6a, 0xb3, 0xbe, 0xb8, 0xf1, 0x4a, 0xf1,
	0x27, 0xe6, 0x84, 0xb4, 0x06, 0xaf, 0x65, 0xfe, 0x35, 0x25, 0x6f, 0xaa, 0xd6, 0xee, 0xd1, 0x3e,
	0xcf, 0x1e, 0x5a, 0x81, 0x25, 0x2e, 0x47, 0x03, 0xe8, 0x16, 0xd4, 0x40, 0xc5, 0x4a, 0x9a, 0x92,
	0x9f, 0xb3, 0xa5, 0x02, 0x4b, 0xad, 0x21, 0xec, 0x72, 0xe4, 0x16, 0x63, 0x66, 0x2d, 0x5e, 0xd8,
	0xac, 0xe7, 0x1e, 0x8e, 0xc7, 0xa8, 0x2d, 0x3a, 0xf5, 0x36, 0x5c, 0xb6, 0xbe, 0x34, 0x25, 0xcf,
	0x9b, 0x75, 0xbe, 0x48, 0xbe, 0x00, 0xe0, 0xf6, 0x81, 0x39, 0xbf, 0x76, 0x66, 0xf8, 0xd5, 0x94,
	0x3c, 0x12, 0x5a, 0x75, 0xd2, 0x01, 0x41, 0xd6, 0x2f, 0xca, 0xdd, 0x43, 0x7f, 0xf5, 0xe0, 0xea,
	0xd4, 0x53, 0xa4, 0x09, 0x65, 0x77, 0x2e, 0xed, 0x0a, 0x64, 0x2a, 0xd7, 0x69, 0x81, 0x86, 0x79,
	0x19, 0xf9, 0x0a, 0xd6, 0x72, 0xcb, 0x87, 0xc2, 0x30, 0xce, 0x0c, 0x43, 0x1b, 0x6f, 0xce, 0xb8,
	0x2d, 0x3b, 0x1e, 0x4d, 0xbb, 0x63, 0x38, 0xe0, 0xa3, 0xcf, 0xbf, 0xfe, 0xbf, 0x07, 0xfc, 0xdb,
	0x6c, 0xc0, 0xcf, 0xf5, 0x28, 0x38, 0xe0, 0x9f, 0x42, 0x79, 0x14, 0x96, 0x1a, 0xff, 0x63, 0x73,
	0x84, 0x59, 0x5e, 0x4d, 0xef, 0xc0, 0xab, 0x0f, 0x59, 0x5f, 0xb7, 0x59, 0x67, 0x3f, 0xe9, 0xa5,
	0x86, 0x6c, 0x40, 0x59, 0x9b, 0xbe, 0x4c, 0x62, 0xbb, 0xc4, 0xf9, 0xce, 0x97, 0xe8, 0x7d, 0xb8,
	0x8c, 0x8a, 0xcf, 0x52, 0x33, 0x90, 0x6c, 0xc1, 0x6a, 0x9a, 0x74, 0xf3, 0x25, 0x94, 0x8d, 0x97,
	0xeb, 0xa7, 0x2b, 0xb0, 0x64, 0x9f, 0x4d, 0xbe, 0xf7, 0xa0, 0xe4, 0xb2, 0x8e, 0xd4, 0x66, 0x90,
	0x4f, 0x86, 0xad, 0x5f, 0x9f, 0x47, 0xe2, 0x5c, 0xa5, 0xdb, 0xdf, 0xfc, 0xfe, 0xf7, 0xf3, 0xc5,
	0x9b, 0x64, 0x33, 0x9c, 0xd0, 0x86, 0xa8, 0x0d, 0x07, 0x5f, 0x45, 0x2e, 0x73, 0xc9, 0xcf, 0x1e,
	0xac, 0x0c, 0xa3, 0x93, 0xec, 0x14, 0x69, 0x38, 0x1e, 0xcf, 0xfe, 0xdd, 0x39, 0x55, 0x48, 0x7a,
	0xdf, 0x92, 0x36, 0x48, 0x6d, 0x44, 0xba, 0x3d, 0x15, 0xd5, 0xa5, 0x55, 0x78, 0x9c, 0x65, 0xfe,
	0x09, 0xf9, 0xd1, 0x83, 0x72, 0x2e, 0x33, 0xc9, 0xbd, 0x22, 0x04, 0x93, 0x41, 0xee, 0xbf, 0x37,
	0xb7, 0x0e, 0xd9, 0x03, 0xcb, 0xbe, 0x45, 0x6e, 0x14, 0x63, 0x27, 0x3f, 0x79, 0x00, 0x36, 0x23,
	0x0e, 0x45, 0x53, 0x72, 0xf2, 0x7e, 0x41, 0xc7, 0x26, 0x12, 0xd9, 0xbf, 0x50, 0x62, 0xd1, 0x86,
	0xc5, 0xdd, 0x26, 0xb7, 0x67, 0xe1, 0x72, 0xc9, 0xc3, 0x63, 0x9b, 0xf2, 0x27, 0xe4, 0x07, 0x0f,
	0x96, 0xb3, 0xac, 0x25, 0x8d, 0x22, 0xc4, 0x63, 0x5f, 0x08, 0xfe, 0xce, 0x7c, 0x22, 0x84, 0xbd,
	0x6d, 0x61, 0x37, 0xc9, 0x5b, 0x05, 0x60, 0xc9, 0x6f, 0x1e, 0xac, 0x8e, 0x25, 0x0c, 0x29, 0x34,
	0x8f, 0x13, 0x3f, 0xb7, 0xfc, 0x7b, 0xf3, 0xca, 0x90, 0xf7, 0x03, 0xcb, 0x7b, 0x97, 0x34, 0x66,
	0xf1, 0x8e, 0xf2, 0x28, 0x3c, 0x76, 0x3f, 0xe5, 0x4e, 0xc8, 0x2f, 0x1e, 0x5c, 0x19, 0x4f, 0x48,
	0x32, 0x27, 0x89, 0x9e, 0x6b, 0x9c, 0xa7, 0x44, 0x31, 0xad, 0xdb, 0x27, 0xbc, 0x4b, 0x6e, 0x15,
	0x7f, 0xc2, 0xee, 0x83, 0x17, 0xa7, 0x55, 0xef, 0xe5, 0x69, 0xd5, 0xfb, 0xeb, 0xb4, 0xea, 0x7d,
	0x77, 0x56, 0x5d, 0x78, 0x79, 0x56, 0x5d, 0xf8, 0xe3, 0xac, 0xba, 0xf0, 0xa4, 0x1e, 0x4b, 0xd3,
	0x4e, 0x0f, 0x82, 0x96, 0xea, 0xfe, 0xcb, 0x7d, 0xdb, 0xf6, 0xc2, 0x67, 0xf6, 0x4a, 0x73, 0xd4,
	0x13, 0xfa, 0xa0, 0x64, 0xb7, 0x1b, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x44, 0x4a, 0x64, 0xdf,
	0x07, 0x0c, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Get the Schema for a specified Schema Id
	GetSchema(ctx context.Context, in *QueryGetSchemaRequest, opts ...grpc.CallOption) (*QueryGetSchemaResponse, error)
	// Get the list of Schemas and count
	SchemaParam(ctx context.Context, in *QuerySchemaParamRequest, opts ...grpc.CallOption) (*QuerySchemaParamResponse, error)
	// Get the Did Document for a specified Did Id
	ResolveDid(ctx context.Context, in *QueryGetDidDocByIdRequest, opts ...grpc.CallOption) (*DidResolutionResponse, error)
	// Get the list of registered Did Documents and count
	DidParam(ctx context.Context, in *QueryDidParamRequest, opts ...grpc.CallOption) (*QueryDidParamResponse, error)
	// Get the Credential Status for a given credential Id
	QueryCredential(ctx context.Context, in *QueryCredentialRequest, opts ...grpc.CallOption) (*QueryCredentialResponse, error)
	// Get all the registed Credential Statuses
	QueryCredentials(ctx context.Context, in *QueryCredentialsRequest, opts ...grpc.CallOption) (*QueryCredentialsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/hypersignprotocol.hidnode.ssi.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetSchema(ctx context.Context, in *QueryGetSchemaRequest, opts ...grpc.CallOption) (*QueryGetSchemaResponse, error) {
	out := new(QueryGetSchemaResponse)
	err := c.cc.Invoke(ctx, "/hypersignprotocol.hidnode.ssi.Query/GetSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SchemaParam(ctx context.Context, in *QuerySchemaParamRequest, opts ...grpc.CallOption) (*QuerySchemaParamResponse, error) {
	out := new(QuerySchemaParamResponse)
	err := c.cc.Invoke(ctx, "/hypersignprotocol.hidnode.ssi.Query/SchemaParam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ResolveDid(ctx context.Context, in *QueryGetDidDocByIdRequest, opts ...grpc.CallOption) (*DidResolutionResponse, error) {
	out := new(DidResolutionResponse)
	err := c.cc.Invoke(ctx, "/hypersignprotocol.hidnode.ssi.Query/ResolveDid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DidParam(ctx context.Context, in *QueryDidParamRequest, opts ...grpc.CallOption) (*QueryDidParamResponse, error) {
	out := new(QueryDidParamResponse)
	err := c.cc.Invoke(ctx, "/hypersignprotocol.hidnode.ssi.Query/DidParam", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryCredential(ctx context.Context, in *QueryCredentialRequest, opts ...grpc.CallOption) (*QueryCredentialResponse, error) {
	out := new(QueryCredentialResponse)
	err := c.cc.Invoke(ctx, "/hypersignprotocol.hidnode.ssi.Query/QueryCredential", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QueryCredentials(ctx context.Context, in *QueryCredentialsRequest, opts ...grpc.CallOption) (*QueryCredentialsResponse, error) {
	out := new(QueryCredentialsResponse)
	err := c.cc.Invoke(ctx, "/hypersignprotocol.hidnode.ssi.Query/QueryCredentials", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Get the Schema for a specified Schema Id
	GetSchema(context.Context, *QueryGetSchemaRequest) (*QueryGetSchemaResponse, error)
	// Get the list of Schemas and count
	SchemaParam(context.Context, *QuerySchemaParamRequest) (*QuerySchemaParamResponse, error)
	// Get the Did Document for a specified Did Id
	ResolveDid(context.Context, *QueryGetDidDocByIdRequest) (*DidResolutionResponse, error)
	// Get the list of registered Did Documents and count
	DidParam(context.Context, *QueryDidParamRequest) (*QueryDidParamResponse, error)
	// Get the Credential Status for a given credential Id
	QueryCredential(context.Context, *QueryCredentialRequest) (*QueryCredentialResponse, error)
	// Get all the registed Credential Statuses
	QueryCredentials(context.Context, *QueryCredentialsRequest) (*QueryCredentialsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) GetSchema(ctx context.Context, req *QueryGetSchemaRequest) (*QueryGetSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchema not implemented")
}
func (*UnimplementedQueryServer) SchemaParam(ctx context.Context, req *QuerySchemaParamRequest) (*QuerySchemaParamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SchemaParam not implemented")
}
func (*UnimplementedQueryServer) ResolveDid(ctx context.Context, req *QueryGetDidDocByIdRequest) (*DidResolutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResolveDid not implemented")
}
func (*UnimplementedQueryServer) DidParam(ctx context.Context, req *QueryDidParamRequest) (*QueryDidParamResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DidParam not implemented")
}
func (*UnimplementedQueryServer) QueryCredential(ctx context.Context, req *QueryCredentialRequest) (*QueryCredentialResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCredential not implemented")
}
func (*UnimplementedQueryServer) QueryCredentials(ctx context.Context, req *QueryCredentialsRequest) (*QueryCredentialsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCredentials not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hypersignprotocol.hidnode.ssi.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hypersignprotocol.hidnode.ssi.Query/GetSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetSchema(ctx, req.(*QueryGetSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SchemaParam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySchemaParamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SchemaParam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hypersignprotocol.hidnode.ssi.Query/SchemaParam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SchemaParam(ctx, req.(*QuerySchemaParamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ResolveDid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetDidDocByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ResolveDid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hypersignprotocol.hidnode.ssi.Query/ResolveDid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ResolveDid(ctx, req.(*QueryGetDidDocByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DidParam_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDidParamRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DidParam(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hypersignprotocol.hidnode.ssi.Query/DidParam",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DidParam(ctx, req.(*QueryDidParamRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryCredential_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCredentialRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryCredential(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hypersignprotocol.hidnode.ssi.Query/QueryCredential",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryCredential(ctx, req.(*QueryCredentialRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QueryCredentials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCredentialsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QueryCredentials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hypersignprotocol.hidnode.ssi.Query/QueryCredentials",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QueryCredentials(ctx, req.(*QueryCredentialsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hypersignprotocol.hidnode.ssi.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "GetSchema",
			Handler:    _Query_GetSchema_Handler,
		},
		{
			MethodName: "SchemaParam",
			Handler:    _Query_SchemaParam_Handler,
		},
		{
			MethodName: "ResolveDid",
			Handler:    _Query_ResolveDid_Handler,
		},
		{
			MethodName: "DidParam",
			Handler:    _Query_DidParam_Handler,
		},
		{
			MethodName: "QueryCredential",
			Handler:    _Query_QueryCredential_Handler,
		},
		{
			MethodName: "QueryCredentials",
			Handler:    _Query_QueryCredentials_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ssi/v1/query.proto",
}

func (m *QueryCredentialRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCredentialRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCredentialRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CredId) > 0 {
		i -= len(m.CredId)
		copy(dAtA[i:], m.CredId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CredId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCredentialResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCredentialResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCredentialResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CredStatus != nil {
		{
			size, err := m.CredStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetSchemaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSchemaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSchemaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SchemaId) > 0 {
		i -= len(m.SchemaId)
		copy(dAtA[i:], m.SchemaId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SchemaId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSchemaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSchemaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSchemaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Schema != nil {
		{
			size, err := m.Schema.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySchemaParamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySchemaParamRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySchemaParamRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySchemaParamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySchemaParamResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySchemaParamResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SchemaList) > 0 {
		for iNdEx := len(m.SchemaList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SchemaList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.TotalCount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDidDocByIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDidDocByIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDidDocByIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DidId) > 0 {
		i -= len(m.DidId)
		copy(dAtA[i:], m.DidId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DidId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDidParamRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDidParamRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDidParamRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Count {
		i--
		if m.Count {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDidParamResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDidParamResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDidParamResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DidDocList) > 0 {
		for iNdEx := len(m.DidDocList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DidDocList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.TotalDidCount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalDidCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DidResolutionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DidResolutionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DidResolutionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DidDocumentMetadata != nil {
		{
			size, err := m.DidDocumentMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.DidDocument != nil {
		{
			size, err := m.DidDocument.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCredentialsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCredentialsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCredentialsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCredentialsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCredentialsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCredentialsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Credentials) > 0 {
		for iNdEx := len(m.Credentials) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Credentials[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.TotalCount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.TotalCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MarshalInput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarshalInput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MarshalInput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.StringInput) > 0 {
		i -= len(m.StringInput)
		copy(dAtA[i:], m.StringInput)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.StringInput)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MarshalOutput) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MarshalOutput) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MarshalOutput) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UnmarshalOutput) > 0 {
		i -= len(m.UnmarshalOutput)
		copy(dAtA[i:], m.UnmarshalOutput)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.UnmarshalOutput)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryCredentialRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CredId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCredentialResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CredStatus != nil {
		l = m.CredStatus.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetSchemaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SchemaId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSchemaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Schema != nil {
		l = m.Schema.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySchemaParamRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySchemaParamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalCount != 0 {
		n += 1 + sovQuery(uint64(m.TotalCount))
	}
	if len(m.SchemaList) > 0 {
		for _, e := range m.SchemaList {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryGetDidDocByIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DidId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDidParamRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count {
		n += 2
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDidParamResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalDidCount != 0 {
		n += 1 + sovQuery(uint64(m.TotalDidCount))
	}
	if len(m.DidDocList) > 0 {
		for _, e := range m.DidDocList {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *DidResolutionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DidDocument != nil {
		l = m.DidDocument.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.DidDocumentMetadata != nil {
		l = m.DidDocumentMetadata.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCredentialsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCredentialsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TotalCount != 0 {
		n += 1 + sovQuery(uint64(m.TotalCount))
	}
	if len(m.Credentials) > 0 {
		for _, e := range m.Credentials {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *MarshalInput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StringInput)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *MarshalOutput) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UnmarshalOutput)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryCredentialRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCredentialRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCredentialRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCredentialResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCredentialResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCredentialResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CredStatus == nil {
				m.CredStatus = &Credential{}
			}
			if err := m.CredStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSchemaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSchemaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSchemaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchemaId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSchemaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSchemaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSchemaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schema", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Schema == nil {
				m.Schema = &Schema{}
			}
			if err := m.Schema.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySchemaParamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySchemaParamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySchemaParamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySchemaParamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySchemaParamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySchemaParamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchemaList = append(m.SchemaList, &Schema{})
			if err := m.SchemaList[len(m.SchemaList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDidDocByIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDidDocByIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDidDocByIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DidId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DidId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDidParamRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDidParamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDidParamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Count = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDidParamResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDidParamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDidParamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDidCount", wireType)
			}
			m.TotalDidCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalDidCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DidDocList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DidDocList = append(m.DidDocList, &DidResolutionResponse{})
			if err := m.DidDocList[len(m.DidDocList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DidResolutionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DidResolutionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DidResolutionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DidDocument", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DidDocument == nil {
				m.DidDocument = &Did{}
			}
			if err := m.DidDocument.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DidDocumentMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DidDocumentMetadata == nil {
				m.DidDocumentMetadata = &Metadata{}
			}
			if err := m.DidDocumentMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCredentialsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCredentialsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCredentialsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCredentialsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCredentialsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCredentialsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalCount", wireType)
			}
			m.TotalCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Credentials", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Credentials = append(m.Credentials, &Credential{})
			if err := m.Credentials[len(m.Credentials)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarshalInput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarshalInput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarshalInput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StringInput", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StringInput = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MarshalOutput) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MarshalOutput: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MarshalOutput: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnmarshalOutput", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UnmarshalOutput = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
