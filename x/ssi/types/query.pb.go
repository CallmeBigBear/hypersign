// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ssi/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QuerySSIFeeRequest struct {
}

func (m *QuerySSIFeeRequest) Reset()         { *m = QuerySSIFeeRequest{} }
func (m *QuerySSIFeeRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySSIFeeRequest) ProtoMessage()    {}
func (*QuerySSIFeeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f525f26163d85f3, []int{0}
}
func (m *QuerySSIFeeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySSIFeeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySSIFeeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySSIFeeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySSIFeeRequest.Merge(m, src)
}
func (m *QuerySSIFeeRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySSIFeeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySSIFeeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySSIFeeRequest proto.InternalMessageInfo

type QuerySSIFeeResponse struct {
	RegisterDidFee              *types.Coin `protobuf:"bytes,1,opt,name=register_did_fee,json=registerDidFee,proto3" json:"register_did_fee,omitempty"`
	UpdateDidFee                *types.Coin `protobuf:"bytes,2,opt,name=update_did_fee,json=updateDidFee,proto3" json:"update_did_fee,omitempty"`
	DeactivateDidFee            *types.Coin `protobuf:"bytes,3,opt,name=deactivate_did_fee,json=deactivateDidFee,proto3" json:"deactivate_did_fee,omitempty"`
	RegisterCredentialSchemaFee *types.Coin `protobuf:"bytes,4,opt,name=register_credential_schema_fee,json=registerCredentialSchemaFee,proto3" json:"register_credential_schema_fee,omitempty"`
	UpdateCredentialSchemaFee   *types.Coin `protobuf:"bytes,5,opt,name=update_credential_schema_fee,json=updateCredentialSchemaFee,proto3" json:"update_credential_schema_fee,omitempty"`
	RegisterCredentialStatusFee *types.Coin `protobuf:"bytes,6,opt,name=register_credential_status_fee,json=registerCredentialStatusFee,proto3" json:"register_credential_status_fee,omitempty"`
	UpdateCredentialStatusFee   *types.Coin `protobuf:"bytes,7,opt,name=update_credential_status_fee,json=updateCredentialStatusFee,proto3" json:"update_credential_status_fee,omitempty"`
}

func (m *QuerySSIFeeResponse) Reset()         { *m = QuerySSIFeeResponse{} }
func (m *QuerySSIFeeResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySSIFeeResponse) ProtoMessage()    {}
func (*QuerySSIFeeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f525f26163d85f3, []int{1}
}
func (m *QuerySSIFeeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySSIFeeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySSIFeeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySSIFeeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySSIFeeResponse.Merge(m, src)
}
func (m *QuerySSIFeeResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySSIFeeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySSIFeeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySSIFeeResponse proto.InternalMessageInfo

func (m *QuerySSIFeeResponse) GetRegisterDidFee() *types.Coin {
	if m != nil {
		return m.RegisterDidFee
	}
	return nil
}

func (m *QuerySSIFeeResponse) GetUpdateDidFee() *types.Coin {
	if m != nil {
		return m.UpdateDidFee
	}
	return nil
}

func (m *QuerySSIFeeResponse) GetDeactivateDidFee() *types.Coin {
	if m != nil {
		return m.DeactivateDidFee
	}
	return nil
}

func (m *QuerySSIFeeResponse) GetRegisterCredentialSchemaFee() *types.Coin {
	if m != nil {
		return m.RegisterCredentialSchemaFee
	}
	return nil
}

func (m *QuerySSIFeeResponse) GetUpdateCredentialSchemaFee() *types.Coin {
	if m != nil {
		return m.UpdateCredentialSchemaFee
	}
	return nil
}

func (m *QuerySSIFeeResponse) GetRegisterCredentialStatusFee() *types.Coin {
	if m != nil {
		return m.RegisterCredentialStatusFee
	}
	return nil
}

func (m *QuerySSIFeeResponse) GetUpdateCredentialStatusFee() *types.Coin {
	if m != nil {
		return m.UpdateCredentialStatusFee
	}
	return nil
}

type QueryCredentialSchemaRequest struct {
	SchemaId string `protobuf:"bytes,1,opt,name=schemaId,proto3" json:"schemaId,omitempty"`
}

func (m *QueryCredentialSchemaRequest) Reset()         { *m = QueryCredentialSchemaRequest{} }
func (m *QueryCredentialSchemaRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCredentialSchemaRequest) ProtoMessage()    {}
func (*QueryCredentialSchemaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f525f26163d85f3, []int{2}
}
func (m *QueryCredentialSchemaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCredentialSchemaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCredentialSchemaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCredentialSchemaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCredentialSchemaRequest.Merge(m, src)
}
func (m *QueryCredentialSchemaRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCredentialSchemaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCredentialSchemaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCredentialSchemaRequest proto.InternalMessageInfo

func (m *QueryCredentialSchemaRequest) GetSchemaId() string {
	if m != nil {
		return m.SchemaId
	}
	return ""
}

type QueryCredentialSchemaResponse struct {
	CredentialSchemas []*CredentialSchemaState `protobuf:"bytes,1,rep,name=credentialSchemas,proto3" json:"credentialSchemas,omitempty"`
}

func (m *QueryCredentialSchemaResponse) Reset()         { *m = QueryCredentialSchemaResponse{} }
func (m *QueryCredentialSchemaResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCredentialSchemaResponse) ProtoMessage()    {}
func (*QueryCredentialSchemaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f525f26163d85f3, []int{3}
}
func (m *QueryCredentialSchemaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCredentialSchemaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCredentialSchemaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCredentialSchemaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCredentialSchemaResponse.Merge(m, src)
}
func (m *QueryCredentialSchemaResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCredentialSchemaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCredentialSchemaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCredentialSchemaResponse proto.InternalMessageInfo

func (m *QueryCredentialSchemaResponse) GetCredentialSchemas() []*CredentialSchemaState {
	if m != nil {
		return m.CredentialSchemas
	}
	return nil
}

type QueryCredentialSchemasRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryCredentialSchemasRequest) Reset()         { *m = QueryCredentialSchemasRequest{} }
func (m *QueryCredentialSchemasRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCredentialSchemasRequest) ProtoMessage()    {}
func (*QueryCredentialSchemasRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f525f26163d85f3, []int{4}
}
func (m *QueryCredentialSchemasRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCredentialSchemasRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCredentialSchemasRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCredentialSchemasRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCredentialSchemasRequest.Merge(m, src)
}
func (m *QueryCredentialSchemasRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCredentialSchemasRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCredentialSchemasRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCredentialSchemasRequest proto.InternalMessageInfo

func (m *QueryCredentialSchemasRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryCredentialSchemasResponse struct {
	Count             uint64                   `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	CredentialSchemas []*CredentialSchemaState `protobuf:"bytes,2,rep,name=credentialSchemas,proto3" json:"credentialSchemas,omitempty"`
}

func (m *QueryCredentialSchemasResponse) Reset()         { *m = QueryCredentialSchemasResponse{} }
func (m *QueryCredentialSchemasResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCredentialSchemasResponse) ProtoMessage()    {}
func (*QueryCredentialSchemasResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f525f26163d85f3, []int{5}
}
func (m *QueryCredentialSchemasResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCredentialSchemasResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCredentialSchemasResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCredentialSchemasResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCredentialSchemasResponse.Merge(m, src)
}
func (m *QueryCredentialSchemasResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCredentialSchemasResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCredentialSchemasResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCredentialSchemasResponse proto.InternalMessageInfo

func (m *QueryCredentialSchemasResponse) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *QueryCredentialSchemasResponse) GetCredentialSchemas() []*CredentialSchemaState {
	if m != nil {
		return m.CredentialSchemas
	}
	return nil
}

type QueryCredentialStatusRequest struct {
	CredId string `protobuf:"bytes,1,opt,name=credId,proto3" json:"credId,omitempty"`
}

func (m *QueryCredentialStatusRequest) Reset()         { *m = QueryCredentialStatusRequest{} }
func (m *QueryCredentialStatusRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCredentialStatusRequest) ProtoMessage()    {}
func (*QueryCredentialStatusRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f525f26163d85f3, []int{6}
}
func (m *QueryCredentialStatusRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCredentialStatusRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCredentialStatusRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCredentialStatusRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCredentialStatusRequest.Merge(m, src)
}
func (m *QueryCredentialStatusRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCredentialStatusRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCredentialStatusRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCredentialStatusRequest proto.InternalMessageInfo

func (m *QueryCredentialStatusRequest) GetCredId() string {
	if m != nil {
		return m.CredId
	}
	return ""
}

type QueryCredentialStatusResponse struct {
	CredentialStatus *CredentialStatusState `protobuf:"bytes,1,opt,name=credentialStatus,proto3" json:"credentialStatus,omitempty"`
}

func (m *QueryCredentialStatusResponse) Reset()         { *m = QueryCredentialStatusResponse{} }
func (m *QueryCredentialStatusResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCredentialStatusResponse) ProtoMessage()    {}
func (*QueryCredentialStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f525f26163d85f3, []int{7}
}
func (m *QueryCredentialStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCredentialStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCredentialStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCredentialStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCredentialStatusResponse.Merge(m, src)
}
func (m *QueryCredentialStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCredentialStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCredentialStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCredentialStatusResponse proto.InternalMessageInfo

func (m *QueryCredentialStatusResponse) GetCredentialStatus() *CredentialStatusState {
	if m != nil {
		return m.CredentialStatus
	}
	return nil
}

type QueryCredentialStatusesRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryCredentialStatusesRequest) Reset()         { *m = QueryCredentialStatusesRequest{} }
func (m *QueryCredentialStatusesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCredentialStatusesRequest) ProtoMessage()    {}
func (*QueryCredentialStatusesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f525f26163d85f3, []int{8}
}
func (m *QueryCredentialStatusesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCredentialStatusesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCredentialStatusesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCredentialStatusesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCredentialStatusesRequest.Merge(m, src)
}
func (m *QueryCredentialStatusesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCredentialStatusesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCredentialStatusesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCredentialStatusesRequest proto.InternalMessageInfo

func (m *QueryCredentialStatusesRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryCredentialStatusesResponse struct {
	Count              uint64                   `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	CredentialStatuses []*CredentialStatusState `protobuf:"bytes,2,rep,name=credentialStatuses,proto3" json:"credentialStatuses,omitempty"`
}

func (m *QueryCredentialStatusesResponse) Reset()         { *m = QueryCredentialStatusesResponse{} }
func (m *QueryCredentialStatusesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCredentialStatusesResponse) ProtoMessage()    {}
func (*QueryCredentialStatusesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f525f26163d85f3, []int{9}
}
func (m *QueryCredentialStatusesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCredentialStatusesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCredentialStatusesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCredentialStatusesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCredentialStatusesResponse.Merge(m, src)
}
func (m *QueryCredentialStatusesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCredentialStatusesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCredentialStatusesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCredentialStatusesResponse proto.InternalMessageInfo

func (m *QueryCredentialStatusesResponse) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *QueryCredentialStatusesResponse) GetCredentialStatuses() []*CredentialStatusState {
	if m != nil {
		return m.CredentialStatuses
	}
	return nil
}

type QueryDidDocumentRequest struct {
	DidId string `protobuf:"bytes,1,opt,name=didId,proto3" json:"didId,omitempty"`
}

func (m *QueryDidDocumentRequest) Reset()         { *m = QueryDidDocumentRequest{} }
func (m *QueryDidDocumentRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDidDocumentRequest) ProtoMessage()    {}
func (*QueryDidDocumentRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f525f26163d85f3, []int{10}
}
func (m *QueryDidDocumentRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDidDocumentRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDidDocumentRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDidDocumentRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDidDocumentRequest.Merge(m, src)
}
func (m *QueryDidDocumentRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDidDocumentRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDidDocumentRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDidDocumentRequest proto.InternalMessageInfo

func (m *QueryDidDocumentRequest) GetDidId() string {
	if m != nil {
		return m.DidId
	}
	return ""
}

type QueryDidDocumentResponse struct {
	DidDocument         *DidDocument         `protobuf:"bytes,1,opt,name=didDocument,proto3" json:"didDocument,omitempty"`
	DidDocumentMetadata *DidDocumentMetadata `protobuf:"bytes,2,opt,name=didDocumentMetadata,proto3" json:"didDocumentMetadata,omitempty"`
}

func (m *QueryDidDocumentResponse) Reset()         { *m = QueryDidDocumentResponse{} }
func (m *QueryDidDocumentResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDidDocumentResponse) ProtoMessage()    {}
func (*QueryDidDocumentResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f525f26163d85f3, []int{11}
}
func (m *QueryDidDocumentResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDidDocumentResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDidDocumentResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDidDocumentResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDidDocumentResponse.Merge(m, src)
}
func (m *QueryDidDocumentResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDidDocumentResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDidDocumentResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDidDocumentResponse proto.InternalMessageInfo

func (m *QueryDidDocumentResponse) GetDidDocument() *DidDocument {
	if m != nil {
		return m.DidDocument
	}
	return nil
}

func (m *QueryDidDocumentResponse) GetDidDocumentMetadata() *DidDocumentMetadata {
	if m != nil {
		return m.DidDocumentMetadata
	}
	return nil
}

type QueryDidDocumentsRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryDidDocumentsRequest) Reset()         { *m = QueryDidDocumentsRequest{} }
func (m *QueryDidDocumentsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDidDocumentsRequest) ProtoMessage()    {}
func (*QueryDidDocumentsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f525f26163d85f3, []int{12}
}
func (m *QueryDidDocumentsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDidDocumentsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDidDocumentsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDidDocumentsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDidDocumentsRequest.Merge(m, src)
}
func (m *QueryDidDocumentsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDidDocumentsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDidDocumentsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDidDocumentsRequest proto.InternalMessageInfo

func (m *QueryDidDocumentsRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryDidDocumentsResponse struct {
	Count        uint64              `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	DidDocuments []*DidDocumentState `protobuf:"bytes,2,rep,name=didDocuments,proto3" json:"didDocuments,omitempty"`
}

func (m *QueryDidDocumentsResponse) Reset()         { *m = QueryDidDocumentsResponse{} }
func (m *QueryDidDocumentsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDidDocumentsResponse) ProtoMessage()    {}
func (*QueryDidDocumentsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f525f26163d85f3, []int{13}
}
func (m *QueryDidDocumentsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDidDocumentsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDidDocumentsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDidDocumentsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDidDocumentsResponse.Merge(m, src)
}
func (m *QueryDidDocumentsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDidDocumentsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDidDocumentsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDidDocumentsResponse proto.InternalMessageInfo

func (m *QueryDidDocumentsResponse) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *QueryDidDocumentsResponse) GetDidDocuments() []*DidDocumentState {
	if m != nil {
		return m.DidDocuments
	}
	return nil
}

func init() {
	proto.RegisterType((*QuerySSIFeeRequest)(nil), "hypersign.ssi.v1.QuerySSIFeeRequest")
	proto.RegisterType((*QuerySSIFeeResponse)(nil), "hypersign.ssi.v1.QuerySSIFeeResponse")
	proto.RegisterType((*QueryCredentialSchemaRequest)(nil), "hypersign.ssi.v1.QueryCredentialSchemaRequest")
	proto.RegisterType((*QueryCredentialSchemaResponse)(nil), "hypersign.ssi.v1.QueryCredentialSchemaResponse")
	proto.RegisterType((*QueryCredentialSchemasRequest)(nil), "hypersign.ssi.v1.QueryCredentialSchemasRequest")
	proto.RegisterType((*QueryCredentialSchemasResponse)(nil), "hypersign.ssi.v1.QueryCredentialSchemasResponse")
	proto.RegisterType((*QueryCredentialStatusRequest)(nil), "hypersign.ssi.v1.QueryCredentialStatusRequest")
	proto.RegisterType((*QueryCredentialStatusResponse)(nil), "hypersign.ssi.v1.QueryCredentialStatusResponse")
	proto.RegisterType((*QueryCredentialStatusesRequest)(nil), "hypersign.ssi.v1.QueryCredentialStatusesRequest")
	proto.RegisterType((*QueryCredentialStatusesResponse)(nil), "hypersign.ssi.v1.QueryCredentialStatusesResponse")
	proto.RegisterType((*QueryDidDocumentRequest)(nil), "hypersign.ssi.v1.QueryDidDocumentRequest")
	proto.RegisterType((*QueryDidDocumentResponse)(nil), "hypersign.ssi.v1.QueryDidDocumentResponse")
	proto.RegisterType((*QueryDidDocumentsRequest)(nil), "hypersign.ssi.v1.QueryDidDocumentsRequest")
	proto.RegisterType((*QueryDidDocumentsResponse)(nil), "hypersign.ssi.v1.QueryDidDocumentsResponse")
}

func init() { proto.RegisterFile("ssi/v1/query.proto", fileDescriptor_0f525f26163d85f3) }

var fileDescriptor_0f525f26163d85f3 = []byte{
	// 940 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0x41, 0x6f, 0xe3, 0x44,
	0x14, 0xc7, 0xeb, 0x6e, 0x53, 0xd8, 0x97, 0x6a, 0xc9, 0xce, 0x46, 0xd0, 0x9a, 0xae, 0x59, 0x19,
	0xba, 0x84, 0x94, 0xda, 0x4d, 0x22, 0x90, 0x80, 0xc3, 0x4a, 0xdb, 0x28, 0xa8, 0x12, 0x48, 0x90,
	0x08, 0xad, 0xb4, 0x07, 0x2a, 0xc7, 0x33, 0x75, 0x46, 0x6a, 0x3c, 0xd9, 0xcc, 0x24, 0xda, 0xa8,
	0xea, 0x85, 0x33, 0x48, 0x2b, 0xe0, 0xca, 0x95, 0x1b, 0x17, 0xb4, 0x1f, 0x82, 0xe3, 0x4a, 0x5c,
	0x38, 0x70, 0x40, 0x2d, 0x1f, 0x04, 0x65, 0x3c, 0x76, 0x9c, 0x38, 0x8e, 0xbd, 0x6c, 0x8f, 0xf6,
	0xcc, 0xff, 0xff, 0x7e, 0xef, 0xbd, 0x99, 0x67, 0x03, 0xe2, 0x9c, 0xda, 0xe3, 0x9a, 0xfd, 0x64,
	0x44, 0x86, 0x13, 0x6b, 0x30, 0x64, 0x82, 0xa1, 0x52, 0x6f, 0x32, 0x20, 0x43, 0x4e, 0x3d, 0xdf,
	0xe2, 0x9c, 0x5a, 0xe3, 0x9a, 0xbe, 0xeb, 0x31, 0xe6, 0x9d, 0x11, 0xdb, 0x19, 0x50, 0xdb, 0xf1,
	0x7d, 0x26, 0x1c, 0x41, 0x99, 0xcf, 0x83, 0xfd, 0x7a, 0xd5, 0x65, 0xbc, 0xcf, 0xb8, 0xdd, 0x75,
	0x38, 0x09, 0x8c, 0xec, 0x71, 0xad, 0x4b, 0x84, 0x53, 0xb3, 0x07, 0x8e, 0x47, 0x7d, 0xb9, 0x59,
	0xed, 0x35, 0x54, 0x3c, 0x77, 0x48, 0x30, 0xf1, 0x05, 0x75, 0xce, 0x4e, 0xb8, 0xdb, 0x23, 0x7d,
	0x47, 0xad, 0x97, 0xd4, 0x3a, 0xa6, 0x38, 0x54, 0xc4, 0xdd, 0x43, 0x5f, 0x97, 0xd1, 0x55, 0x8e,
	0xc2, 0x11, 0x23, 0x45, 0x67, 0x96, 0x01, 0x7d, 0x3d, 0x65, 0xea, 0x74, 0x8e, 0x5b, 0x84, 0xb4,
	0xc9, 0x93, 0x11, 0xe1, 0xc2, 0xfc, 0x7b, 0x03, 0xee, 0xcc, 0xbd, 0xe6, 0x03, 0xe6, 0x73, 0x82,
	0x8e, 0xa0, 0x34, 0x24, 0x1e, 0xe5, 0x82, 0x0c, 0x4f, 0x30, 0xc5, 0x27, 0xa7, 0x84, 0x6c, 0x6b,
	0xf7, 0xb4, 0x4a, 0xb1, 0xbe, 0x63, 0x05, 0x20, 0xd6, 0x14, 0xc4, 0x52, 0x20, 0xd6, 0x11, 0xa3,
	0x7e, 0xfb, 0x56, 0x28, 0x69, 0x52, 0xdc, 0x22, 0x04, 0x3d, 0x80, 0x5b, 0xa3, 0x01, 0x76, 0x04,
	0x89, 0x2c, 0xd6, 0xb3, 0x2c, 0xb6, 0x02, 0x81, 0x32, 0xf8, 0x1c, 0x10, 0x26, 0x8e, 0x2b, 0xe8,
	0x38, 0x6e, 0x72, 0x23, 0xcb, 0xa4, 0x34, 0x13, 0x29, 0xa3, 0x6f, 0xc1, 0x88, 0xd2, 0x49, 0x94,
	0x5c, 0x9a, 0x6e, 0x64, 0x99, 0xbe, 0x1d, 0x1a, 0x1c, 0x45, 0xfa, 0x8e, 0x94, 0x4f, 0xfd, 0x1f,
	0xc3, 0xae, 0xca, 0x74, 0xb9, 0x7b, 0x21, 0xcb, 0x7d, 0x27, 0x90, 0x2f, 0xf3, 0x4e, 0x63, 0x97,
	0xcd, 0x95, 0xee, 0x9b, 0xff, 0x87, 0x5d, 0xca, 0xd3, 0xd9, 0x67, 0xee, 0xaf, 0xbd, 0x3c, 0x7b,
	0xe8, 0x6d, 0x7e, 0x0a, 0xbb, 0xf2, 0x74, 0x2d, 0xe6, 0xa5, 0x8e, 0x1f, 0xd2, 0xe1, 0xf5, 0xa0,
	0x4a, 0xc7, 0x58, 0x1e, 0xaf, 0x9b, 0xed, 0xe8, 0xd9, 0x1c, 0xc3, 0xdd, 0x14, 0xad, 0x3a, 0xa3,
	0xdf, 0xc0, 0x6d, 0x77, 0x61, 0x8d, 0x6f, 0x6b, 0xf7, 0x6e, 0x54, 0x8a, 0xf5, 0xf7, 0xad, 0xc5,
	0xbb, 0x6b, 0x2d, 0xda, 0x4c, 0x21, 0x49, 0x3b, 0xe9, 0x60, 0x7a, 0x29, 0x71, 0x79, 0x08, 0xdd,
	0x02, 0x98, 0xdd, 0x67, 0x75, 0x2b, 0xee, 0xcf, 0x95, 0x27, 0x98, 0x22, 0x61, 0x91, 0xbe, 0x72,
	0xbc, 0xf0, 0xbe, 0xb5, 0x63, 0x4a, 0xf3, 0x07, 0x0d, 0x8c, 0xb4, 0x48, 0x2a, 0xc5, 0x32, 0x14,
	0x5c, 0x36, 0xf2, 0x85, 0x8c, 0xb2, 0xd1, 0x0e, 0x1e, 0x96, 0x27, 0xbe, 0xfe, 0xca, 0x89, 0x7f,
	0x9c, 0x6c, 0x96, 0x6c, 0x64, 0x98, 0xf7, 0x9b, 0xb0, 0x39, 0x15, 0x45, 0xad, 0x52, 0x4f, 0xa6,
	0x48, 0x16, 0x4c, 0xe9, 0x54, 0x16, 0x1d, 0x28, 0xb9, 0x0b, 0x6b, 0xaa, 0x6c, 0xab, 0x71, 0xe5,
	0xce, 0x00, 0x37, 0x61, 0x60, 0xf6, 0x92, 0xc5, 0x93, 0x0b, 0xe4, 0xda, 0xfb, 0xf4, 0x4c, 0x83,
	0x77, 0x52, 0x43, 0xad, 0x6c, 0xd4, 0x23, 0x40, 0x6e, 0x42, 0x93, 0xab, 0x53, 0xb1, 0xd4, 0x97,
	0x58, 0x98, 0x36, 0xbc, 0x25, 0x89, 0x9a, 0x14, 0x37, 0x99, 0x3b, 0xea, 0x13, 0x5f, 0x84, 0x59,
	0x97, 0xa1, 0x80, 0xe9, 0xac, 0x49, 0xc1, 0x83, 0xf9, 0x5c, 0x83, 0xed, 0xa4, 0x42, 0xc1, 0x3f,
	0x80, 0x22, 0x9e, 0xbd, 0x56, 0x95, 0xba, 0x9b, 0xe4, 0x8b, 0x6b, 0xe3, 0x0a, 0xf4, 0x08, 0xee,
	0xc4, 0x1e, 0xbf, 0x24, 0xc2, 0xc1, 0x8e, 0x70, 0xd4, 0xb4, 0xdf, 0x5b, 0x69, 0x14, 0x6e, 0x6e,
	0x2f, 0x73, 0x30, 0xbb, 0x49, 0xea, 0x6b, 0x6f, 0xef, 0x04, 0x76, 0x96, 0xc4, 0x58, 0xd9, 0xd7,
	0x16, 0x6c, 0xc5, 0x68, 0xc3, 0x8e, 0x9a, 0x2b, 0x13, 0x0d, 0x9a, 0x39, 0xa7, 0xab, 0xff, 0x78,
	0x13, 0x0a, 0x32, 0x36, 0xfa, 0x5d, 0x83, 0xf2, 0xe2, 0x45, 0x7d, 0x38, 0x39, 0x6e, 0x22, 0x2b,
	0x69, 0xba, 0x6a, 0xa2, 0xea, 0x76, 0xee, 0xfd, 0x41, 0x86, 0xe6, 0x27, 0xdf, 0xfd, 0xf9, 0xef,
	0x4f, 0xeb, 0x0d, 0x54, 0xb3, 0x23, 0xe1, 0x81, 0xfc, 0x63, 0x70, 0xd9, 0x99, 0xdd, 0xa3, 0xd8,
	0x67, 0x98, 0xd8, 0xd3, 0x7f, 0x8b, 0x60, 0x30, 0xdb, 0xe7, 0xe1, 0x80, 0xbe, 0x40, 0xbf, 0x6a,
	0x70, 0x3b, 0x31, 0xbb, 0x50, 0x5e, 0x82, 0xb0, 0x91, 0xfa, 0x61, 0x7e, 0x81, 0x62, 0xb6, 0x24,
	0x73, 0x05, 0xdd, 0xcf, 0xc7, 0x8c, 0x7e, 0xd1, 0xe0, 0x8d, 0x58, 0x2b, 0x64, 0x61, 0x3f, 0x48,
	0x89, 0x9a, 0xbc, 0x52, 0x7a, 0x35, 0xcf, 0x56, 0x85, 0xd6, 0x90, 0x68, 0x07, 0x68, 0x3f, 0x0b,
	0x0d, 0x53, 0x6c, 0x9f, 0xcb, 0xcb, 0x79, 0x81, 0x7e, 0xd6, 0x60, 0x2b, 0x7e, 0xfc, 0x50, 0x8e,
	0x88, 0x51, 0xf9, 0xf6, 0x73, 0xed, 0x55, 0x78, 0xfb, 0x12, 0x6f, 0x0f, 0xbd, 0x9b, 0x03, 0x0f,
	0x3d, 0x9f, 0x3f, 0x94, 0x72, 0xf8, 0xe4, 0x3d, 0x94, 0xf1, 0x2f, 0x47, 0x9e, 0x43, 0x39, 0xf7,
	0xc5, 0x30, 0x3f, 0x93, 0x98, 0x1f, 0xa1, 0x46, 0x16, 0xe6, 0x6c, 0x36, 0xda, 0xe7, 0xc1, 0xe7,
	0xe8, 0x02, 0xfd, 0xa6, 0x01, 0x4a, 0x8e, 0x6a, 0x74, 0x98, 0x13, 0x22, 0xfa, 0x80, 0xe8, 0xb5,
	0x97, 0x50, 0x28, 0xf0, 0xba, 0x04, 0xff, 0x10, 0x55, 0xf3, 0x83, 0xa3, 0xef, 0x35, 0x28, 0xc6,
	0xfe, 0xc1, 0xd1, 0x7b, 0x29, 0x61, 0xe7, 0xfe, 0xdc, 0xf5, 0xbd, 0x8c, 0x5d, 0x0a, 0xe8, 0x50,
	0x02, 0x55, 0x51, 0x25, 0x0b, 0xe8, 0x94, 0x3e, 0x25, 0xf8, 0x94, 0x90, 0x87, 0x5f, 0xfc, 0x71,
	0x69, 0x68, 0x2f, 0x2e, 0x0d, 0xed, 0x9f, 0x4b, 0x43, 0x7b, 0x76, 0x65, 0xac, 0xbd, 0xb8, 0x32,
	0xd6, 0xfe, 0xba, 0x32, 0xd6, 0x1e, 0xd7, 0x3d, 0x2a, 0x7a, 0xa3, 0xae, 0xe5, 0xb2, 0x7e, 0x8a,
	0xdb, 0x81, 0xb4, 0x7b, 0x2a, 0x0d, 0xc5, 0x64, 0x40, 0x78, 0x77, 0x53, 0x2e, 0x37, 0xfe, 0x0b,
	0x00, 0x00, 0xff, 0xff, 0xf4, 0x7f, 0xd1, 0x4e, 0x61, 0x0d, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Get the Schema Document for a specified schema id
	CredentialSchemaByID(ctx context.Context, in *QueryCredentialSchemaRequest, opts ...grpc.CallOption) (*QueryCredentialSchemaResponse, error)
	// Get the count and list of registered Schemas
	CredentialSchemas(ctx context.Context, in *QueryCredentialSchemasRequest, opts ...grpc.CallOption) (*QueryCredentialSchemasResponse, error)
	// Get the Did Document for a specified DID id
	DidDocumentByID(ctx context.Context, in *QueryDidDocumentRequest, opts ...grpc.CallOption) (*QueryDidDocumentResponse, error)
	// Get the count and list of registered Did Documents
	DidDocuments(ctx context.Context, in *QueryDidDocumentsRequest, opts ...grpc.CallOption) (*QueryDidDocumentsResponse, error)
	// Get the Credential Status for a given credential id
	CredentialStatusByID(ctx context.Context, in *QueryCredentialStatusRequest, opts ...grpc.CallOption) (*QueryCredentialStatusResponse, error)
	// Get all the registed Credential Statuses
	CredentialStatuses(ctx context.Context, in *QueryCredentialStatusesRequest, opts ...grpc.CallOption) (*QueryCredentialStatusesResponse, error)
	// Get the list of fixed fees for every x/ssi module transactions
	QuerySSIFee(ctx context.Context, in *QuerySSIFeeRequest, opts ...grpc.CallOption) (*QuerySSIFeeResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) CredentialSchemaByID(ctx context.Context, in *QueryCredentialSchemaRequest, opts ...grpc.CallOption) (*QueryCredentialSchemaResponse, error) {
	out := new(QueryCredentialSchemaResponse)
	err := c.cc.Invoke(ctx, "/hypersign.ssi.v1.Query/CredentialSchemaByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CredentialSchemas(ctx context.Context, in *QueryCredentialSchemasRequest, opts ...grpc.CallOption) (*QueryCredentialSchemasResponse, error) {
	out := new(QueryCredentialSchemasResponse)
	err := c.cc.Invoke(ctx, "/hypersign.ssi.v1.Query/CredentialSchemas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DidDocumentByID(ctx context.Context, in *QueryDidDocumentRequest, opts ...grpc.CallOption) (*QueryDidDocumentResponse, error) {
	out := new(QueryDidDocumentResponse)
	err := c.cc.Invoke(ctx, "/hypersign.ssi.v1.Query/DidDocumentByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DidDocuments(ctx context.Context, in *QueryDidDocumentsRequest, opts ...grpc.CallOption) (*QueryDidDocumentsResponse, error) {
	out := new(QueryDidDocumentsResponse)
	err := c.cc.Invoke(ctx, "/hypersign.ssi.v1.Query/DidDocuments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CredentialStatusByID(ctx context.Context, in *QueryCredentialStatusRequest, opts ...grpc.CallOption) (*QueryCredentialStatusResponse, error) {
	out := new(QueryCredentialStatusResponse)
	err := c.cc.Invoke(ctx, "/hypersign.ssi.v1.Query/CredentialStatusByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CredentialStatuses(ctx context.Context, in *QueryCredentialStatusesRequest, opts ...grpc.CallOption) (*QueryCredentialStatusesResponse, error) {
	out := new(QueryCredentialStatusesResponse)
	err := c.cc.Invoke(ctx, "/hypersign.ssi.v1.Query/CredentialStatuses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) QuerySSIFee(ctx context.Context, in *QuerySSIFeeRequest, opts ...grpc.CallOption) (*QuerySSIFeeResponse, error) {
	out := new(QuerySSIFeeResponse)
	err := c.cc.Invoke(ctx, "/hypersign.ssi.v1.Query/QuerySSIFee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Get the Schema Document for a specified schema id
	CredentialSchemaByID(context.Context, *QueryCredentialSchemaRequest) (*QueryCredentialSchemaResponse, error)
	// Get the count and list of registered Schemas
	CredentialSchemas(context.Context, *QueryCredentialSchemasRequest) (*QueryCredentialSchemasResponse, error)
	// Get the Did Document for a specified DID id
	DidDocumentByID(context.Context, *QueryDidDocumentRequest) (*QueryDidDocumentResponse, error)
	// Get the count and list of registered Did Documents
	DidDocuments(context.Context, *QueryDidDocumentsRequest) (*QueryDidDocumentsResponse, error)
	// Get the Credential Status for a given credential id
	CredentialStatusByID(context.Context, *QueryCredentialStatusRequest) (*QueryCredentialStatusResponse, error)
	// Get all the registed Credential Statuses
	CredentialStatuses(context.Context, *QueryCredentialStatusesRequest) (*QueryCredentialStatusesResponse, error)
	// Get the list of fixed fees for every x/ssi module transactions
	QuerySSIFee(context.Context, *QuerySSIFeeRequest) (*QuerySSIFeeResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) CredentialSchemaByID(ctx context.Context, req *QueryCredentialSchemaRequest) (*QueryCredentialSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CredentialSchemaByID not implemented")
}
func (*UnimplementedQueryServer) CredentialSchemas(ctx context.Context, req *QueryCredentialSchemasRequest) (*QueryCredentialSchemasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CredentialSchemas not implemented")
}
func (*UnimplementedQueryServer) DidDocumentByID(ctx context.Context, req *QueryDidDocumentRequest) (*QueryDidDocumentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DidDocumentByID not implemented")
}
func (*UnimplementedQueryServer) DidDocuments(ctx context.Context, req *QueryDidDocumentsRequest) (*QueryDidDocumentsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DidDocuments not implemented")
}
func (*UnimplementedQueryServer) CredentialStatusByID(ctx context.Context, req *QueryCredentialStatusRequest) (*QueryCredentialStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CredentialStatusByID not implemented")
}
func (*UnimplementedQueryServer) CredentialStatuses(ctx context.Context, req *QueryCredentialStatusesRequest) (*QueryCredentialStatusesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CredentialStatuses not implemented")
}
func (*UnimplementedQueryServer) QuerySSIFee(ctx context.Context, req *QuerySSIFeeRequest) (*QuerySSIFeeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuerySSIFee not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_CredentialSchemaByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCredentialSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CredentialSchemaByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hypersign.ssi.v1.Query/CredentialSchemaByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CredentialSchemaByID(ctx, req.(*QueryCredentialSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CredentialSchemas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCredentialSchemasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CredentialSchemas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hypersign.ssi.v1.Query/CredentialSchemas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CredentialSchemas(ctx, req.(*QueryCredentialSchemasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DidDocumentByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDidDocumentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DidDocumentByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hypersign.ssi.v1.Query/DidDocumentByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DidDocumentByID(ctx, req.(*QueryDidDocumentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DidDocuments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDidDocumentsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DidDocuments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hypersign.ssi.v1.Query/DidDocuments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DidDocuments(ctx, req.(*QueryDidDocumentsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CredentialStatusByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCredentialStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CredentialStatusByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hypersign.ssi.v1.Query/CredentialStatusByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CredentialStatusByID(ctx, req.(*QueryCredentialStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CredentialStatuses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCredentialStatusesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CredentialStatuses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hypersign.ssi.v1.Query/CredentialStatuses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CredentialStatuses(ctx, req.(*QueryCredentialStatusesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_QuerySSIFee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySSIFeeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).QuerySSIFee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hypersign.ssi.v1.Query/QuerySSIFee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).QuerySSIFee(ctx, req.(*QuerySSIFeeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hypersign.ssi.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CredentialSchemaByID",
			Handler:    _Query_CredentialSchemaByID_Handler,
		},
		{
			MethodName: "CredentialSchemas",
			Handler:    _Query_CredentialSchemas_Handler,
		},
		{
			MethodName: "DidDocumentByID",
			Handler:    _Query_DidDocumentByID_Handler,
		},
		{
			MethodName: "DidDocuments",
			Handler:    _Query_DidDocuments_Handler,
		},
		{
			MethodName: "CredentialStatusByID",
			Handler:    _Query_CredentialStatusByID_Handler,
		},
		{
			MethodName: "CredentialStatuses",
			Handler:    _Query_CredentialStatuses_Handler,
		},
		{
			MethodName: "QuerySSIFee",
			Handler:    _Query_QuerySSIFee_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ssi/v1/query.proto",
}

func (m *QuerySSIFeeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySSIFeeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySSIFeeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QuerySSIFeeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySSIFeeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySSIFeeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.UpdateCredentialStatusFee != nil {
		{
			size, err := m.UpdateCredentialStatusFee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.RegisterCredentialStatusFee != nil {
		{
			size, err := m.RegisterCredentialStatusFee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.UpdateCredentialSchemaFee != nil {
		{
			size, err := m.UpdateCredentialSchemaFee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.RegisterCredentialSchemaFee != nil {
		{
			size, err := m.RegisterCredentialSchemaFee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.DeactivateDidFee != nil {
		{
			size, err := m.DeactivateDidFee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.UpdateDidFee != nil {
		{
			size, err := m.UpdateDidFee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.RegisterDidFee != nil {
		{
			size, err := m.RegisterDidFee.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCredentialSchemaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCredentialSchemaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCredentialSchemaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SchemaId) > 0 {
		i -= len(m.SchemaId)
		copy(dAtA[i:], m.SchemaId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SchemaId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCredentialSchemaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCredentialSchemaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCredentialSchemaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CredentialSchemas) > 0 {
		for iNdEx := len(m.CredentialSchemas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CredentialSchemas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryCredentialSchemasRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCredentialSchemasRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCredentialSchemasRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCredentialSchemasResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCredentialSchemasResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCredentialSchemasResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CredentialSchemas) > 0 {
		for iNdEx := len(m.CredentialSchemas) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CredentialSchemas[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Count != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryCredentialStatusRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCredentialStatusRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCredentialStatusRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CredId) > 0 {
		i -= len(m.CredId)
		copy(dAtA[i:], m.CredId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.CredId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCredentialStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCredentialStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCredentialStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CredentialStatus != nil {
		{
			size, err := m.CredentialStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCredentialStatusesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCredentialStatusesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCredentialStatusesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCredentialStatusesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCredentialStatusesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCredentialStatusesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CredentialStatuses) > 0 {
		for iNdEx := len(m.CredentialStatuses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CredentialStatuses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Count != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDidDocumentRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDidDocumentRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDidDocumentRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DidId) > 0 {
		i -= len(m.DidId)
		copy(dAtA[i:], m.DidId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DidId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDidDocumentResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDidDocumentResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDidDocumentResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DidDocumentMetadata != nil {
		{
			size, err := m.DidDocumentMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.DidDocument != nil {
		{
			size, err := m.DidDocument.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDidDocumentsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDidDocumentsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDidDocumentsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDidDocumentsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDidDocumentsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDidDocumentsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DidDocuments) > 0 {
		for iNdEx := len(m.DidDocuments) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DidDocuments[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Count != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QuerySSIFeeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QuerySSIFeeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RegisterDidFee != nil {
		l = m.RegisterDidFee.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.UpdateDidFee != nil {
		l = m.UpdateDidFee.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.DeactivateDidFee != nil {
		l = m.DeactivateDidFee.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.RegisterCredentialSchemaFee != nil {
		l = m.RegisterCredentialSchemaFee.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.UpdateCredentialSchemaFee != nil {
		l = m.UpdateCredentialSchemaFee.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.RegisterCredentialStatusFee != nil {
		l = m.RegisterCredentialStatusFee.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.UpdateCredentialStatusFee != nil {
		l = m.UpdateCredentialStatusFee.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCredentialSchemaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SchemaId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCredentialSchemaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CredentialSchemas) > 0 {
		for _, e := range m.CredentialSchemas {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryCredentialSchemasRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCredentialSchemasResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovQuery(uint64(m.Count))
	}
	if len(m.CredentialSchemas) > 0 {
		for _, e := range m.CredentialSchemas {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryCredentialStatusRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.CredId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCredentialStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CredentialStatus != nil {
		l = m.CredentialStatus.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCredentialStatusesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCredentialStatusesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovQuery(uint64(m.Count))
	}
	if len(m.CredentialStatuses) > 0 {
		for _, e := range m.CredentialStatuses {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryDidDocumentRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DidId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDidDocumentResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DidDocument != nil {
		l = m.DidDocument.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.DidDocumentMetadata != nil {
		l = m.DidDocumentMetadata.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDidDocumentsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDidDocumentsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovQuery(uint64(m.Count))
	}
	if len(m.DidDocuments) > 0 {
		for _, e := range m.DidDocuments {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QuerySSIFeeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySSIFeeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySSIFeeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySSIFeeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySSIFeeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySSIFeeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterDidFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RegisterDidFee == nil {
				m.RegisterDidFee = &types.Coin{}
			}
			if err := m.RegisterDidFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateDidFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdateDidFee == nil {
				m.UpdateDidFee = &types.Coin{}
			}
			if err := m.UpdateDidFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeactivateDidFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DeactivateDidFee == nil {
				m.DeactivateDidFee = &types.Coin{}
			}
			if err := m.DeactivateDidFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterCredentialSchemaFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RegisterCredentialSchemaFee == nil {
				m.RegisterCredentialSchemaFee = &types.Coin{}
			}
			if err := m.RegisterCredentialSchemaFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateCredentialSchemaFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdateCredentialSchemaFee == nil {
				m.UpdateCredentialSchemaFee = &types.Coin{}
			}
			if err := m.UpdateCredentialSchemaFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisterCredentialStatusFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RegisterCredentialStatusFee == nil {
				m.RegisterCredentialStatusFee = &types.Coin{}
			}
			if err := m.RegisterCredentialStatusFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdateCredentialStatusFee", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.UpdateCredentialStatusFee == nil {
				m.UpdateCredentialStatusFee = &types.Coin{}
			}
			if err := m.UpdateCredentialStatusFee.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCredentialSchemaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCredentialSchemaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCredentialSchemaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchemaId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCredentialSchemaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCredentialSchemaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCredentialSchemaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialSchemas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialSchemas = append(m.CredentialSchemas, &CredentialSchemaState{})
			if err := m.CredentialSchemas[len(m.CredentialSchemas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCredentialSchemasRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCredentialSchemasRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCredentialSchemasRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCredentialSchemasResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCredentialSchemasResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCredentialSchemasResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialSchemas", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialSchemas = append(m.CredentialSchemas, &CredentialSchemaState{})
			if err := m.CredentialSchemas[len(m.CredentialSchemas)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCredentialStatusRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCredentialStatusRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCredentialStatusRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCredentialStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCredentialStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCredentialStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CredentialStatus == nil {
				m.CredentialStatus = &CredentialStatusState{}
			}
			if err := m.CredentialStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCredentialStatusesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCredentialStatusesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCredentialStatusesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCredentialStatusesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCredentialStatusesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCredentialStatusesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialStatuses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CredentialStatuses = append(m.CredentialStatuses, &CredentialStatusState{})
			if err := m.CredentialStatuses[len(m.CredentialStatuses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDidDocumentRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDidDocumentRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDidDocumentRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DidId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DidId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDidDocumentResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDidDocumentResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDidDocumentResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DidDocument", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DidDocument == nil {
				m.DidDocument = &DidDocument{}
			}
			if err := m.DidDocument.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DidDocumentMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DidDocumentMetadata == nil {
				m.DidDocumentMetadata = &DidDocumentMetadata{}
			}
			if err := m.DidDocumentMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDidDocumentsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDidDocumentsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDidDocumentsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDidDocumentsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDidDocumentsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDidDocumentsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DidDocuments", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DidDocuments = append(m.DidDocuments, &DidDocumentState{})
			if err := m.DidDocuments[len(m.DidDocuments)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
