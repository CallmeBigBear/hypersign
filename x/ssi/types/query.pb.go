// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ssi/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for the Query/Params RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f525f26163d85f3, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params RPC method.
type QueryParamsResponse struct {
	// params holds all the parameters of this module.
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f525f26163d85f3, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryGetSchemaRequest struct {
	SchemaId string `protobuf:"bytes,1,opt,name=schemaId,proto3" json:"schemaId,omitempty"`
}

func (m *QueryGetSchemaRequest) Reset()         { *m = QueryGetSchemaRequest{} }
func (m *QueryGetSchemaRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetSchemaRequest) ProtoMessage()    {}
func (*QueryGetSchemaRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f525f26163d85f3, []int{2}
}
func (m *QueryGetSchemaRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSchemaRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSchemaRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSchemaRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSchemaRequest.Merge(m, src)
}
func (m *QueryGetSchemaRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSchemaRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSchemaRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSchemaRequest proto.InternalMessageInfo

func (m *QueryGetSchemaRequest) GetSchemaId() string {
	if m != nil {
		return m.SchemaId
	}
	return ""
}

type QueryGetSchemaResponse struct {
	Schema *Schema `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
}

func (m *QueryGetSchemaResponse) Reset()         { *m = QueryGetSchemaResponse{} }
func (m *QueryGetSchemaResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetSchemaResponse) ProtoMessage()    {}
func (*QueryGetSchemaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f525f26163d85f3, []int{3}
}
func (m *QueryGetSchemaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetSchemaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetSchemaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetSchemaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetSchemaResponse.Merge(m, src)
}
func (m *QueryGetSchemaResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetSchemaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetSchemaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetSchemaResponse proto.InternalMessageInfo

func (m *QueryGetSchemaResponse) GetSchema() *Schema {
	if m != nil {
		return m.Schema
	}
	return nil
}

type QuerySchemasRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QuerySchemasRequest) Reset()         { *m = QuerySchemasRequest{} }
func (m *QuerySchemasRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySchemasRequest) ProtoMessage()    {}
func (*QuerySchemasRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f525f26163d85f3, []int{4}
}
func (m *QuerySchemasRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySchemasRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySchemasRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySchemasRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySchemasRequest.Merge(m, src)
}
func (m *QuerySchemasRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySchemasRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySchemasRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySchemasRequest proto.InternalMessageInfo

func (m *QuerySchemasRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QuerySchemasResponse struct {
	SchemaList []*Schema           `protobuf:"bytes,1,rep,name=schemaList,proto3" json:"schemaList,omitempty"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QuerySchemasResponse) Reset()         { *m = QuerySchemasResponse{} }
func (m *QuerySchemasResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySchemasResponse) ProtoMessage()    {}
func (*QuerySchemasResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f525f26163d85f3, []int{5}
}
func (m *QuerySchemasResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySchemasResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySchemasResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySchemasResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySchemasResponse.Merge(m, src)
}
func (m *QuerySchemasResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySchemasResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySchemasResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySchemasResponse proto.InternalMessageInfo

func (m *QuerySchemasResponse) GetSchemaList() []*Schema {
	if m != nil {
		return m.SchemaList
	}
	return nil
}

func (m *QuerySchemasResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QuerySchemaCountRequest struct {
}

func (m *QuerySchemaCountRequest) Reset()         { *m = QuerySchemaCountRequest{} }
func (m *QuerySchemaCountRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySchemaCountRequest) ProtoMessage()    {}
func (*QuerySchemaCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f525f26163d85f3, []int{6}
}
func (m *QuerySchemaCountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySchemaCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySchemaCountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySchemaCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySchemaCountRequest.Merge(m, src)
}
func (m *QuerySchemaCountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySchemaCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySchemaCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySchemaCountRequest proto.InternalMessageInfo

type QuerySchemaCountResponse struct {
	Count uint64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *QuerySchemaCountResponse) Reset()         { *m = QuerySchemaCountResponse{} }
func (m *QuerySchemaCountResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySchemaCountResponse) ProtoMessage()    {}
func (*QuerySchemaCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f525f26163d85f3, []int{7}
}
func (m *QuerySchemaCountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySchemaCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySchemaCountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySchemaCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySchemaCountResponse.Merge(m, src)
}
func (m *QuerySchemaCountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySchemaCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySchemaCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySchemaCountResponse proto.InternalMessageInfo

func (m *QuerySchemaCountResponse) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type QueryGetDidDocByIdRequest struct {
	DidDocId string `protobuf:"bytes,1,opt,name=didDocId,proto3" json:"didDocId,omitempty"`
}

func (m *QueryGetDidDocByIdRequest) Reset()         { *m = QueryGetDidDocByIdRequest{} }
func (m *QueryGetDidDocByIdRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetDidDocByIdRequest) ProtoMessage()    {}
func (*QueryGetDidDocByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f525f26163d85f3, []int{8}
}
func (m *QueryGetDidDocByIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDidDocByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDidDocByIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDidDocByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDidDocByIdRequest.Merge(m, src)
}
func (m *QueryGetDidDocByIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDidDocByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDidDocByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDidDocByIdRequest proto.InternalMessageInfo

func (m *QueryGetDidDocByIdRequest) GetDidDocId() string {
	if m != nil {
		return m.DidDocId
	}
	return ""
}

type QueryGetDidDocByIdResponse struct {
	XAtContext            string          `protobuf:"bytes,1,opt,name=_at_context,json=AtContext,proto3" json:"_at_context,omitempty"`
	DidDocument           *Did            `protobuf:"bytes,2,opt,name=didDocument,proto3" json:"didDocument,omitempty"`
	DidDocumentMetadata   *Metadata       `protobuf:"bytes,3,opt,name=didDocumentMetadata,proto3" json:"didDocumentMetadata,omitempty"`
	DidResolutionMetadata *DidResolveMeta `protobuf:"bytes,4,opt,name=didResolutionMetadata,proto3" json:"didResolutionMetadata,omitempty"`
}

func (m *QueryGetDidDocByIdResponse) Reset()         { *m = QueryGetDidDocByIdResponse{} }
func (m *QueryGetDidDocByIdResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetDidDocByIdResponse) ProtoMessage()    {}
func (*QueryGetDidDocByIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f525f26163d85f3, []int{9}
}
func (m *QueryGetDidDocByIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDidDocByIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDidDocByIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDidDocByIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDidDocByIdResponse.Merge(m, src)
}
func (m *QueryGetDidDocByIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDidDocByIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDidDocByIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDidDocByIdResponse proto.InternalMessageInfo

func (m *QueryGetDidDocByIdResponse) GetXAtContext() string {
	if m != nil {
		return m.XAtContext
	}
	return ""
}

func (m *QueryGetDidDocByIdResponse) GetDidDocument() *Did {
	if m != nil {
		return m.DidDocument
	}
	return nil
}

func (m *QueryGetDidDocByIdResponse) GetDidDocumentMetadata() *Metadata {
	if m != nil {
		return m.DidDocumentMetadata
	}
	return nil
}

func (m *QueryGetDidDocByIdResponse) GetDidResolutionMetadata() *DidResolveMeta {
	if m != nil {
		return m.DidResolutionMetadata
	}
	return nil
}

type QueryDidDereferenceResponse struct {
	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *QueryDidDereferenceResponse) Reset()         { *m = QueryDidDereferenceResponse{} }
func (m *QueryDidDereferenceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDidDereferenceResponse) ProtoMessage()    {}
func (*QueryDidDereferenceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f525f26163d85f3, []int{10}
}
func (m *QueryDidDereferenceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDidDereferenceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDidDereferenceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDidDereferenceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDidDereferenceResponse.Merge(m, src)
}
func (m *QueryDidDereferenceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDidDereferenceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDidDereferenceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDidDereferenceResponse proto.InternalMessageInfo

func (m *QueryDidDereferenceResponse) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

type QueryDidDocCountRequest struct {
}

func (m *QueryDidDocCountRequest) Reset()         { *m = QueryDidDocCountRequest{} }
func (m *QueryDidDocCountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDidDocCountRequest) ProtoMessage()    {}
func (*QueryDidDocCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f525f26163d85f3, []int{11}
}
func (m *QueryDidDocCountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDidDocCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDidDocCountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDidDocCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDidDocCountRequest.Merge(m, src)
}
func (m *QueryDidDocCountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDidDocCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDidDocCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDidDocCountRequest proto.InternalMessageInfo

type QueryDidDocCountResponse struct {
	Count uint64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *QueryDidDocCountResponse) Reset()         { *m = QueryDidDocCountResponse{} }
func (m *QueryDidDocCountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDidDocCountResponse) ProtoMessage()    {}
func (*QueryDidDocCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_0f525f26163d85f3, []int{12}
}
func (m *QueryDidDocCountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDidDocCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDidDocCountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDidDocCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDidDocCountResponse.Merge(m, src)
}
func (m *QueryDidDocCountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDidDocCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDidDocCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDidDocCountResponse proto.InternalMessageInfo

func (m *QueryDidDocCountResponse) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "hypersignprotocol.hidnode.ssi.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "hypersignprotocol.hidnode.ssi.QueryParamsResponse")
	proto.RegisterType((*QueryGetSchemaRequest)(nil), "hypersignprotocol.hidnode.ssi.QueryGetSchemaRequest")
	proto.RegisterType((*QueryGetSchemaResponse)(nil), "hypersignprotocol.hidnode.ssi.QueryGetSchemaResponse")
	proto.RegisterType((*QuerySchemasRequest)(nil), "hypersignprotocol.hidnode.ssi.QuerySchemasRequest")
	proto.RegisterType((*QuerySchemasResponse)(nil), "hypersignprotocol.hidnode.ssi.QuerySchemasResponse")
	proto.RegisterType((*QuerySchemaCountRequest)(nil), "hypersignprotocol.hidnode.ssi.QuerySchemaCountRequest")
	proto.RegisterType((*QuerySchemaCountResponse)(nil), "hypersignprotocol.hidnode.ssi.QuerySchemaCountResponse")
	proto.RegisterType((*QueryGetDidDocByIdRequest)(nil), "hypersignprotocol.hidnode.ssi.QueryGetDidDocByIdRequest")
	proto.RegisterType((*QueryGetDidDocByIdResponse)(nil), "hypersignprotocol.hidnode.ssi.QueryGetDidDocByIdResponse")
	proto.RegisterType((*QueryDidDereferenceResponse)(nil), "hypersignprotocol.hidnode.ssi.QueryDidDereferenceResponse")
	proto.RegisterType((*QueryDidDocCountRequest)(nil), "hypersignprotocol.hidnode.ssi.QueryDidDocCountRequest")
	proto.RegisterType((*QueryDidDocCountResponse)(nil), "hypersignprotocol.hidnode.ssi.QueryDidDocCountResponse")
}

func init() { proto.RegisterFile("ssi/v1/query.proto", fileDescriptor_0f525f26163d85f3) }

var fileDescriptor_0f525f26163d85f3 = []byte{
	// 828 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x95, 0xcd, 0x4f, 0xdb, 0x48,
	0x18, 0xc6, 0x63, 0x3e, 0x02, 0x4c, 0x0e, 0xbb, 0x1a, 0x02, 0x1b, 0xbc, 0xbb, 0x59, 0x64, 0x89,
	0x65, 0xbf, 0x62, 0x93, 0xf0, 0xb9, 0x87, 0x56, 0x82, 0xa4, 0x45, 0x48, 0x54, 0xa2, 0xee, 0xa1,
	0x2a, 0x52, 0x85, 0x1c, 0x7b, 0xea, 0x58, 0x4a, 0x3c, 0xc1, 0x33, 0x41, 0x44, 0x88, 0x4b, 0xff,
	0x82, 0x4a, 0xbd, 0xf7, 0xd8, 0x43, 0x6f, 0x95, 0x7a, 0xee, 0xa1, 0x3d, 0x94, 0x23, 0x52, 0x2f,
	0x3d, 0x55, 0x15, 0xf4, 0x0f, 0xa9, 0x3c, 0xf3, 0x3a, 0x38, 0x24, 0x25, 0x4e, 0x6f, 0x99, 0x77,
	0xfc, 0x3c, 0xf3, 0x9b, 0x67, 0x66, 0xde, 0x20, 0xcc, 0x98, 0x67, 0x1c, 0x15, 0x8d, 0xc3, 0x16,
	0x09, 0xda, 0x7a, 0x33, 0xa0, 0x9c, 0xe2, 0xdf, 0x6b, 0xed, 0x26, 0x09, 0x98, 0xe7, 0xfa, 0x62,
	0x6c, 0xd3, 0xba, 0x5e, 0xf3, 0x1c, 0x9f, 0x3a, 0x44, 0x67, 0xcc, 0x53, 0xb3, 0x2e, 0x75, 0xa9,
	0x98, 0x31, 0xc2, 0x5f, 0x52, 0xa4, 0xfe, 0xe6, 0x52, 0xea, 0xd6, 0x89, 0x61, 0x35, 0x3d, 0xc3,
	0xf2, 0x7d, 0xca, 0x2d, 0xee, 0x51, 0x9f, 0xc1, 0xec, 0x3f, 0x36, 0x65, 0x0d, 0xca, 0x8c, 0xaa,
	0xc5, 0x88, 0x5c, 0xcb, 0x38, 0x2a, 0x56, 0x09, 0xb7, 0x8a, 0x46, 0xd3, 0x72, 0x3d, 0x5f, 0x7c,
	0x0c, 0xdf, 0x4e, 0x03, 0x52, 0xd3, 0x0a, 0xac, 0x06, 0xbb, 0x56, 0x64, 0x76, 0x8d, 0x34, 0x2c,
	0x28, 0xfe, 0x0c, 0x45, 0xc7, 0x73, 0xa0, 0xf2, 0x13, 0x54, 0xf8, 0xb1, 0x2c, 0x68, 0x59, 0x84,
	0xef, 0x87, 0xcb, 0xed, 0x09, 0x33, 0x93, 0x1c, 0xb6, 0x08, 0xe3, 0xda, 0x3e, 0x9a, 0xee, 0xaa,
	0xb2, 0x26, 0xf5, 0x19, 0xc1, 0x65, 0x94, 0x96, 0x8b, 0xe6, 0x94, 0x79, 0xe5, 0xaf, 0x4c, 0x69,
	0x41, 0xbf, 0x31, 0x09, 0x5d, 0xca, 0xb7, 0xc6, 0xce, 0x3e, 0xff, 0x91, 0x32, 0x41, 0xaa, 0x2d,
	0xa3, 0x19, 0xe1, 0xbd, 0x4d, 0xf8, 0x03, 0x01, 0x0b, 0x8b, 0x62, 0x15, 0x4d, 0x4a, 0xfa, 0x1d,
	0x47, 0xf8, 0x4f, 0x99, 0x9d, 0xb1, 0xf6, 0x10, 0xcd, 0x5e, 0x17, 0x01, 0xd3, 0x2d, 0x94, 0x96,
	0x5f, 0x25, 0x64, 0x02, 0x39, 0x88, 0xb4, 0xc7, 0xb0, 0x53, 0x59, 0x8e, 0x02, 0xc0, 0x77, 0x11,
	0xba, 0xca, 0x1d, 0x9c, 0xff, 0xd4, 0xe5, 0x21, 0xe9, 0xe1, 0x21, 0xe9, 0xf2, 0x42, 0xc0, 0x21,
	0xe9, 0x7b, 0x96, 0x4b, 0x40, 0x6b, 0xc6, 0x94, 0xda, 0x4b, 0x05, 0x65, 0xbb, 0xfd, 0x01, 0xfb,
	0x0e, 0x42, 0x92, 0x60, 0xd7, 0x63, 0x3c, 0xa7, 0xcc, 0x8f, 0x26, 0x47, 0x8f, 0x09, 0xf1, 0x76,
	0x17, 0xe7, 0x88, 0xe0, 0x5c, 0x1c, 0xc8, 0x29, 0x19, 0xba, 0x40, 0xe7, 0xd0, 0x2f, 0x31, 0xce,
	0x32, 0x6d, 0xf9, 0x3c, 0xba, 0x0c, 0x4b, 0x28, 0xd7, 0x3b, 0x05, 0xdb, 0xc8, 0xa2, 0x71, 0x3b,
	0x2c, 0x88, 0x88, 0xc6, 0x4c, 0x39, 0xd0, 0xd6, 0xd1, 0x5c, 0x74, 0x5a, 0x15, 0xcf, 0xa9, 0x50,
	0x7b, 0xab, 0xbd, 0xe3, 0xc4, 0x8e, 0xd9, 0x11, 0xc5, 0xab, 0x63, 0x8e, 0xc6, 0xda, 0xbb, 0x11,
	0xa4, 0xf6, 0x53, 0xc2, 0x6a, 0x79, 0x94, 0x39, 0xb0, 0xf8, 0x81, 0x4d, 0x7d, 0x4e, 0x8e, 0x39,
	0xa8, 0xa7, 0x36, 0x79, 0x59, 0x16, 0x70, 0x05, 0x65, 0xa4, 0x55, 0xab, 0x41, 0x7c, 0x0e, 0x71,
	0x68, 0x03, 0x52, 0xad, 0x78, 0x8e, 0x19, 0x97, 0xe1, 0x47, 0x68, 0x3a, 0x36, 0xbc, 0x47, 0xb8,
	0xe5, 0x58, 0xdc, 0xca, 0x8d, 0x42, 0xb8, 0x37, 0xbb, 0x45, 0x9f, 0x9b, 0xfd, 0x3c, 0xb0, 0x8d,
	0x66, 0x1c, 0x2f, 0xdc, 0x0f, 0xad, 0xb7, 0xc2, 0xd8, 0x3b, 0xe6, 0x63, 0xc2, 0xbc, 0x90, 0x00,
	0x35, 0xd4, 0x1e, 0x91, 0x50, 0x68, 0xf6, 0xf7, 0xd2, 0x56, 0xd1, 0xaf, 0x22, 0xc3, 0x30, 0x40,
	0x12, 0x90, 0x27, 0x24, 0x20, 0xbe, 0xdd, 0x39, 0x75, 0x3c, 0x8b, 0xd2, 0x01, 0x61, 0xad, 0x7a,
	0x94, 0x1f, 0x8c, 0x3a, 0x37, 0x40, 0xe6, 0xde, 0xf7, 0x06, 0x74, 0x4d, 0xdd, 0x74, 0x03, 0x4a,
	0x1f, 0x26, 0xd1, 0xb8, 0x90, 0xe0, 0x17, 0x0a, 0x4a, 0xcb, 0x3e, 0x80, 0x8b, 0x03, 0xb6, 0xd7,
	0xdb, 0x88, 0xd4, 0xd2, 0x30, 0x12, 0x49, 0xa4, 0x15, 0x9e, 0x7e, 0xfc, 0xfa, 0x7c, 0x64, 0x11,
	0x2f, 0x18, 0x3d, 0x5a, 0x03, 0xb4, 0x46, 0xd8, 0x06, 0x65, 0x3f, 0xc2, 0xef, 0x15, 0x34, 0xd5,
	0x69, 0x2b, 0x78, 0x25, 0xc9, 0x82, 0xd7, 0x5b, 0x97, 0xba, 0x3a, 0xa4, 0x0a, 0x48, 0x77, 0x04,
	0x69, 0x19, 0x6f, 0x5e, 0x91, 0x16, 0xfa, 0xa2, 0xca, 0x17, 0x2f, 0xff, 0x18, 0xa4, 0x47, 0xf8,
	0x2e, 0x8c, 0x93, 0xa8, 0x3f, 0x9e, 0xe2, 0x57, 0x0a, 0x9a, 0x80, 0x1e, 0x83, 0x13, 0x85, 0xd6,
	0xdd, 0xf0, 0xd4, 0xe5, 0xa1, 0x34, 0xc0, 0xbf, 0x26, 0xf8, 0x97, 0xb0, 0x9e, 0x90, 0x9f, 0x01,
	0xe0, 0x1b, 0x05, 0x65, 0x62, 0xdd, 0x04, 0xaf, 0x25, 0x5f, 0x3c, 0x7e, 0x2f, 0xd5, 0xf5, 0xa1,
	0x75, 0x00, 0xbe, 0x22, 0xc0, 0x75, 0xfc, 0x5f, 0x42, 0x70, 0x71, 0xa9, 0xf1, 0x5b, 0x05, 0x4d,
	0xc0, 0xfb, 0xc3, 0x1b, 0x09, 0x4f, 0xbc, 0xa7, 0xff, 0xa9, 0xff, 0xff, 0x80, 0x12, 0xb0, 0x6f,
	0x0b, 0xec, 0x0d, 0xbc, 0x36, 0x08, 0xdb, 0xf1, 0x1c, 0x23, 0x90, 0xa4, 0xc6, 0x49, 0xd4, 0x5d,
	0x4f, 0xf1, 0x6b, 0x05, 0x65, 0x62, 0x6f, 0x38, 0x59, 0xee, 0xbd, 0xfd, 0x20, 0x59, 0xee, 0x7d,
	0x9a, 0x85, 0x56, 0x14, 0x1b, 0xf8, 0x17, 0xff, 0x9d, 0x64, 0x03, 0x22, 0xf4, 0xad, 0xdd, 0xb3,
	0x8b, 0xbc, 0x72, 0x7e, 0x91, 0x57, 0xbe, 0x5c, 0xe4, 0x95, 0x67, 0x97, 0xf9, 0xd4, 0xf9, 0x65,
	0x3e, 0xf5, 0xe9, 0x32, 0x9f, 0xda, 0x2f, 0xb9, 0x1e, 0xaf, 0xb5, 0xaa, 0xba, 0x4d, 0x1b, 0xdf,
	0xb1, 0x2b, 0x08, 0xbf, 0x63, 0xe1, 0xc8, 0xdb, 0x4d, 0xc2, 0xaa, 0x69, 0x31, 0xbd, 0xfc, 0x2d,
	0x00, 0x00, 0xff, 0xff, 0x9d, 0x91, 0x7b, 0x1a, 0xd7, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Parameters queries the parameters of the module.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Queries a list of GetSchema items.
	GetSchema(ctx context.Context, in *QueryGetSchemaRequest, opts ...grpc.CallOption) (*QueryGetSchemaResponse, error)
	// Queries a list of Schemas items.
	Schemas(ctx context.Context, in *QuerySchemasRequest, opts ...grpc.CallOption) (*QuerySchemasResponse, error)
	// Queries a list of SchemaCount items.
	SchemaCount(ctx context.Context, in *QuerySchemaCountRequest, opts ...grpc.CallOption) (*QuerySchemaCountResponse, error)
	// Resolve DID
	Resolve(ctx context.Context, in *QueryGetDidDocByIdRequest, opts ...grpc.CallOption) (*QueryGetDidDocByIdResponse, error)
	// Queries a list of DidDocCount items.
	DidDocCount(ctx context.Context, in *QueryDidDocCountRequest, opts ...grpc.CallOption) (*QueryDidDocCountResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/hypersignprotocol.hidnode.ssi.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetSchema(ctx context.Context, in *QueryGetSchemaRequest, opts ...grpc.CallOption) (*QueryGetSchemaResponse, error) {
	out := new(QueryGetSchemaResponse)
	err := c.cc.Invoke(ctx, "/hypersignprotocol.hidnode.ssi.Query/GetSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Schemas(ctx context.Context, in *QuerySchemasRequest, opts ...grpc.CallOption) (*QuerySchemasResponse, error) {
	out := new(QuerySchemasResponse)
	err := c.cc.Invoke(ctx, "/hypersignprotocol.hidnode.ssi.Query/Schemas", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) SchemaCount(ctx context.Context, in *QuerySchemaCountRequest, opts ...grpc.CallOption) (*QuerySchemaCountResponse, error) {
	out := new(QuerySchemaCountResponse)
	err := c.cc.Invoke(ctx, "/hypersignprotocol.hidnode.ssi.Query/SchemaCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Resolve(ctx context.Context, in *QueryGetDidDocByIdRequest, opts ...grpc.CallOption) (*QueryGetDidDocByIdResponse, error) {
	out := new(QueryGetDidDocByIdResponse)
	err := c.cc.Invoke(ctx, "/hypersignprotocol.hidnode.ssi.Query/Resolve", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DidDocCount(ctx context.Context, in *QueryDidDocCountRequest, opts ...grpc.CallOption) (*QueryDidDocCountResponse, error) {
	out := new(QueryDidDocCountResponse)
	err := c.cc.Invoke(ctx, "/hypersignprotocol.hidnode.ssi.Query/DidDocCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Parameters queries the parameters of the module.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Queries a list of GetSchema items.
	GetSchema(context.Context, *QueryGetSchemaRequest) (*QueryGetSchemaResponse, error)
	// Queries a list of Schemas items.
	Schemas(context.Context, *QuerySchemasRequest) (*QuerySchemasResponse, error)
	// Queries a list of SchemaCount items.
	SchemaCount(context.Context, *QuerySchemaCountRequest) (*QuerySchemaCountResponse, error)
	// Resolve DID
	Resolve(context.Context, *QueryGetDidDocByIdRequest) (*QueryGetDidDocByIdResponse, error)
	// Queries a list of DidDocCount items.
	DidDocCount(context.Context, *QueryDidDocCountRequest) (*QueryDidDocCountResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) GetSchema(ctx context.Context, req *QueryGetSchemaRequest) (*QueryGetSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSchema not implemented")
}
func (*UnimplementedQueryServer) Schemas(ctx context.Context, req *QuerySchemasRequest) (*QuerySchemasResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Schemas not implemented")
}
func (*UnimplementedQueryServer) SchemaCount(ctx context.Context, req *QuerySchemaCountRequest) (*QuerySchemaCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SchemaCount not implemented")
}
func (*UnimplementedQueryServer) Resolve(ctx context.Context, req *QueryGetDidDocByIdRequest) (*QueryGetDidDocByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Resolve not implemented")
}
func (*UnimplementedQueryServer) DidDocCount(ctx context.Context, req *QueryDidDocCountRequest) (*QueryDidDocCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DidDocCount not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hypersignprotocol.hidnode.ssi.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetSchemaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hypersignprotocol.hidnode.ssi.Query/GetSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetSchema(ctx, req.(*QueryGetSchemaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Schemas_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySchemasRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Schemas(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hypersignprotocol.hidnode.ssi.Query/Schemas",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Schemas(ctx, req.(*QuerySchemasRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_SchemaCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySchemaCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).SchemaCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hypersignprotocol.hidnode.ssi.Query/SchemaCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).SchemaCount(ctx, req.(*QuerySchemaCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Resolve_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetDidDocByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Resolve(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hypersignprotocol.hidnode.ssi.Query/Resolve",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Resolve(ctx, req.(*QueryGetDidDocByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DidDocCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDidDocCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DidDocCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hypersignprotocol.hidnode.ssi.Query/DidDocCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DidDocCount(ctx, req.(*QueryDidDocCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hypersignprotocol.hidnode.ssi.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "GetSchema",
			Handler:    _Query_GetSchema_Handler,
		},
		{
			MethodName: "Schemas",
			Handler:    _Query_Schemas_Handler,
		},
		{
			MethodName: "SchemaCount",
			Handler:    _Query_SchemaCount_Handler,
		},
		{
			MethodName: "Resolve",
			Handler:    _Query_Resolve_Handler,
		},
		{
			MethodName: "DidDocCount",
			Handler:    _Query_DidDocCount_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ssi/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryGetSchemaRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSchemaRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSchemaRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SchemaId) > 0 {
		i -= len(m.SchemaId)
		copy(dAtA[i:], m.SchemaId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.SchemaId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetSchemaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetSchemaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetSchemaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Schema != nil {
		{
			size, err := m.Schema.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySchemasRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySchemasRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySchemasRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySchemasResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySchemasResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySchemasResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.SchemaList) > 0 {
		for iNdEx := len(m.SchemaList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SchemaList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QuerySchemaCountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySchemaCountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySchemaCountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QuerySchemaCountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySchemaCountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySchemaCountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDidDocByIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDidDocByIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDidDocByIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.DidDocId) > 0 {
		i -= len(m.DidDocId)
		copy(dAtA[i:], m.DidDocId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.DidDocId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDidDocByIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDidDocByIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDidDocByIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DidResolutionMetadata != nil {
		{
			size, err := m.DidResolutionMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.DidDocumentMetadata != nil {
		{
			size, err := m.DidDocumentMetadata.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.DidDocument != nil {
		{
			size, err := m.DidDocument.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.XAtContext) > 0 {
		i -= len(m.XAtContext)
		copy(dAtA[i:], m.XAtContext)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.XAtContext)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDidDereferenceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDidDereferenceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDidDereferenceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDidDocCountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDidDocCountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDidDocCountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryDidDocCountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDidDocCountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDidDocCountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryGetSchemaRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SchemaId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetSchemaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Schema != nil {
		l = m.Schema.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySchemasRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySchemasResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SchemaList) > 0 {
		for _, e := range m.SchemaList {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySchemaCountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QuerySchemaCountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovQuery(uint64(m.Count))
	}
	return n
}

func (m *QueryGetDidDocByIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DidDocId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetDidDocByIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.XAtContext)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.DidDocument != nil {
		l = m.DidDocument.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.DidDocumentMetadata != nil {
		l = m.DidDocumentMetadata.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.DidResolutionMetadata != nil {
		l = m.DidResolutionMetadata.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDidDereferenceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDidDocCountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryDidDocCountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovQuery(uint64(m.Count))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSchemaRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSchemaRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSchemaRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchemaId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetSchemaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetSchemaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetSchemaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Schema", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Schema == nil {
				m.Schema = &Schema{}
			}
			if err := m.Schema.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySchemasRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySchemasRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySchemasRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySchemasResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySchemasResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySchemasResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SchemaList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SchemaList = append(m.SchemaList, &Schema{})
			if err := m.SchemaList[len(m.SchemaList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySchemaCountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySchemaCountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySchemaCountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySchemaCountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySchemaCountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySchemaCountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDidDocByIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDidDocByIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDidDocByIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DidDocId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DidDocId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDidDocByIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDidDocByIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDidDocByIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field XAtContext", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.XAtContext = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DidDocument", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DidDocument == nil {
				m.DidDocument = &Did{}
			}
			if err := m.DidDocument.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DidDocumentMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DidDocumentMetadata == nil {
				m.DidDocumentMetadata = &Metadata{}
			}
			if err := m.DidDocumentMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DidResolutionMetadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DidResolutionMetadata == nil {
				m.DidResolutionMetadata = &DidResolveMeta{}
			}
			if err := m.DidResolutionMetadata.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDidDereferenceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDidDereferenceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDidDereferenceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDidDocCountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDidDocCountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDidDocCountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDidDocCountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDidDocCountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDidDocCountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
