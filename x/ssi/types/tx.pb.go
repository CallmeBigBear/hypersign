// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ssi/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type MsgRegisterDID struct {
	DidDocument       *DidDocument     `protobuf:"bytes,1,opt,name=didDocument,proto3" json:"didDocument,omitempty"`
	DidDocumentProofs []*DocumentProof `protobuf:"bytes,2,rep,name=didDocumentProofs,proto3" json:"didDocumentProofs,omitempty"`
	TxAuthor          string           `protobuf:"bytes,3,opt,name=txAuthor,proto3" json:"txAuthor,omitempty"`
}

func (m *MsgRegisterDID) Reset()         { *m = MsgRegisterDID{} }
func (m *MsgRegisterDID) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterDID) ProtoMessage()    {}
func (*MsgRegisterDID) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a1aa6c7279248b, []int{0}
}
func (m *MsgRegisterDID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterDID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterDID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterDID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterDID.Merge(m, src)
}
func (m *MsgRegisterDID) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterDID) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterDID.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterDID proto.InternalMessageInfo

func (m *MsgRegisterDID) GetDidDocument() *DidDocument {
	if m != nil {
		return m.DidDocument
	}
	return nil
}

func (m *MsgRegisterDID) GetDidDocumentProofs() []*DocumentProof {
	if m != nil {
		return m.DidDocumentProofs
	}
	return nil
}

func (m *MsgRegisterDID) GetTxAuthor() string {
	if m != nil {
		return m.TxAuthor
	}
	return ""
}

type MsgRegisterDIDResponse struct {
}

func (m *MsgRegisterDIDResponse) Reset()         { *m = MsgRegisterDIDResponse{} }
func (m *MsgRegisterDIDResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterDIDResponse) ProtoMessage()    {}
func (*MsgRegisterDIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a1aa6c7279248b, []int{1}
}
func (m *MsgRegisterDIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterDIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterDIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterDIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterDIDResponse.Merge(m, src)
}
func (m *MsgRegisterDIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterDIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterDIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterDIDResponse proto.InternalMessageInfo

type MsgUpdateDID struct {
	DidDocument       *DidDocument     `protobuf:"bytes,1,opt,name=didDocument,proto3" json:"didDocument,omitempty"`
	DidDocumentProofs []*DocumentProof `protobuf:"bytes,2,rep,name=didDocumentProofs,proto3" json:"didDocumentProofs,omitempty"`
	VersionId         string           `protobuf:"bytes,3,opt,name=versionId,proto3" json:"versionId,omitempty"`
	TxAuthor          string           `protobuf:"bytes,4,opt,name=txAuthor,proto3" json:"txAuthor,omitempty"`
}

func (m *MsgUpdateDID) Reset()         { *m = MsgUpdateDID{} }
func (m *MsgUpdateDID) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateDID) ProtoMessage()    {}
func (*MsgUpdateDID) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a1aa6c7279248b, []int{2}
}
func (m *MsgUpdateDID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateDID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateDID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateDID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateDID.Merge(m, src)
}
func (m *MsgUpdateDID) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateDID) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateDID.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateDID proto.InternalMessageInfo

func (m *MsgUpdateDID) GetDidDocument() *DidDocument {
	if m != nil {
		return m.DidDocument
	}
	return nil
}

func (m *MsgUpdateDID) GetDidDocumentProofs() []*DocumentProof {
	if m != nil {
		return m.DidDocumentProofs
	}
	return nil
}

func (m *MsgUpdateDID) GetVersionId() string {
	if m != nil {
		return m.VersionId
	}
	return ""
}

func (m *MsgUpdateDID) GetTxAuthor() string {
	if m != nil {
		return m.TxAuthor
	}
	return ""
}

type MsgUpdateDIDResponse struct {
}

func (m *MsgUpdateDIDResponse) Reset()         { *m = MsgUpdateDIDResponse{} }
func (m *MsgUpdateDIDResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateDIDResponse) ProtoMessage()    {}
func (*MsgUpdateDIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a1aa6c7279248b, []int{3}
}
func (m *MsgUpdateDIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateDIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateDIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateDIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateDIDResponse.Merge(m, src)
}
func (m *MsgUpdateDIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateDIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateDIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateDIDResponse proto.InternalMessageInfo

type MsgDeactivateDID struct {
	DidDocumentId     string           `protobuf:"bytes,1,opt,name=didDocumentId,proto3" json:"didDocumentId,omitempty"`
	DidDocumentProofs []*DocumentProof `protobuf:"bytes,2,rep,name=didDocumentProofs,proto3" json:"didDocumentProofs,omitempty"`
	VersionId         string           `protobuf:"bytes,3,opt,name=versionId,proto3" json:"versionId,omitempty"`
	TxAuthor          string           `protobuf:"bytes,4,opt,name=txAuthor,proto3" json:"txAuthor,omitempty"`
}

func (m *MsgDeactivateDID) Reset()         { *m = MsgDeactivateDID{} }
func (m *MsgDeactivateDID) String() string { return proto.CompactTextString(m) }
func (*MsgDeactivateDID) ProtoMessage()    {}
func (*MsgDeactivateDID) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a1aa6c7279248b, []int{4}
}
func (m *MsgDeactivateDID) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeactivateDID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeactivateDID.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeactivateDID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeactivateDID.Merge(m, src)
}
func (m *MsgDeactivateDID) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeactivateDID) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeactivateDID.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeactivateDID proto.InternalMessageInfo

func (m *MsgDeactivateDID) GetDidDocumentId() string {
	if m != nil {
		return m.DidDocumentId
	}
	return ""
}

func (m *MsgDeactivateDID) GetDidDocumentProofs() []*DocumentProof {
	if m != nil {
		return m.DidDocumentProofs
	}
	return nil
}

func (m *MsgDeactivateDID) GetVersionId() string {
	if m != nil {
		return m.VersionId
	}
	return ""
}

func (m *MsgDeactivateDID) GetTxAuthor() string {
	if m != nil {
		return m.TxAuthor
	}
	return ""
}

type MsgDeactivateDIDResponse struct {
}

func (m *MsgDeactivateDIDResponse) Reset()         { *m = MsgDeactivateDIDResponse{} }
func (m *MsgDeactivateDIDResponse) String() string { return proto.CompactTextString(m) }
func (*MsgDeactivateDIDResponse) ProtoMessage()    {}
func (*MsgDeactivateDIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a1aa6c7279248b, []int{5}
}
func (m *MsgDeactivateDIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgDeactivateDIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgDeactivateDIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgDeactivateDIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgDeactivateDIDResponse.Merge(m, src)
}
func (m *MsgDeactivateDIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgDeactivateDIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgDeactivateDIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgDeactivateDIDResponse proto.InternalMessageInfo

type MsgRegisterCredentialSchema struct {
	CredentialSchemaDocument *CredentialSchemaDocument `protobuf:"bytes,1,opt,name=credentialSchemaDocument,proto3" json:"credentialSchemaDocument,omitempty"`
	CredentialSchemaProof    *DocumentProof            `protobuf:"bytes,2,opt,name=credentialSchemaProof,proto3" json:"credentialSchemaProof,omitempty"`
	TxAuthor                 string                    `protobuf:"bytes,3,opt,name=txAuthor,proto3" json:"txAuthor,omitempty"`
}

func (m *MsgRegisterCredentialSchema) Reset()         { *m = MsgRegisterCredentialSchema{} }
func (m *MsgRegisterCredentialSchema) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterCredentialSchema) ProtoMessage()    {}
func (*MsgRegisterCredentialSchema) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a1aa6c7279248b, []int{6}
}
func (m *MsgRegisterCredentialSchema) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterCredentialSchema) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterCredentialSchema.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterCredentialSchema) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterCredentialSchema.Merge(m, src)
}
func (m *MsgRegisterCredentialSchema) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterCredentialSchema) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterCredentialSchema.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterCredentialSchema proto.InternalMessageInfo

func (m *MsgRegisterCredentialSchema) GetCredentialSchemaDocument() *CredentialSchemaDocument {
	if m != nil {
		return m.CredentialSchemaDocument
	}
	return nil
}

func (m *MsgRegisterCredentialSchema) GetCredentialSchemaProof() *DocumentProof {
	if m != nil {
		return m.CredentialSchemaProof
	}
	return nil
}

func (m *MsgRegisterCredentialSchema) GetTxAuthor() string {
	if m != nil {
		return m.TxAuthor
	}
	return ""
}

type MsgRegisterCredentialSchemaResponse struct {
}

func (m *MsgRegisterCredentialSchemaResponse) Reset()         { *m = MsgRegisterCredentialSchemaResponse{} }
func (m *MsgRegisterCredentialSchemaResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterCredentialSchemaResponse) ProtoMessage()    {}
func (*MsgRegisterCredentialSchemaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a1aa6c7279248b, []int{7}
}
func (m *MsgRegisterCredentialSchemaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterCredentialSchemaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterCredentialSchemaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterCredentialSchemaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterCredentialSchemaResponse.Merge(m, src)
}
func (m *MsgRegisterCredentialSchemaResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterCredentialSchemaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterCredentialSchemaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterCredentialSchemaResponse proto.InternalMessageInfo

type MsgUpdateCredentialSchema struct {
	CredentialSchemaDocument *CredentialSchemaDocument `protobuf:"bytes,1,opt,name=credentialSchemaDocument,proto3" json:"credentialSchemaDocument,omitempty"`
	CredentialSchemaProof    *DocumentProof            `protobuf:"bytes,2,opt,name=credentialSchemaProof,proto3" json:"credentialSchemaProof,omitempty"`
	TxAuthor                 string                    `protobuf:"bytes,3,opt,name=txAuthor,proto3" json:"txAuthor,omitempty"`
}

func (m *MsgUpdateCredentialSchema) Reset()         { *m = MsgUpdateCredentialSchema{} }
func (m *MsgUpdateCredentialSchema) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateCredentialSchema) ProtoMessage()    {}
func (*MsgUpdateCredentialSchema) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a1aa6c7279248b, []int{8}
}
func (m *MsgUpdateCredentialSchema) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateCredentialSchema) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateCredentialSchema.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateCredentialSchema) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateCredentialSchema.Merge(m, src)
}
func (m *MsgUpdateCredentialSchema) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateCredentialSchema) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateCredentialSchema.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateCredentialSchema proto.InternalMessageInfo

func (m *MsgUpdateCredentialSchema) GetCredentialSchemaDocument() *CredentialSchemaDocument {
	if m != nil {
		return m.CredentialSchemaDocument
	}
	return nil
}

func (m *MsgUpdateCredentialSchema) GetCredentialSchemaProof() *DocumentProof {
	if m != nil {
		return m.CredentialSchemaProof
	}
	return nil
}

func (m *MsgUpdateCredentialSchema) GetTxAuthor() string {
	if m != nil {
		return m.TxAuthor
	}
	return ""
}

type MsgUpdateCredentialSchemaResponse struct {
}

func (m *MsgUpdateCredentialSchemaResponse) Reset()         { *m = MsgUpdateCredentialSchemaResponse{} }
func (m *MsgUpdateCredentialSchemaResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateCredentialSchemaResponse) ProtoMessage()    {}
func (*MsgUpdateCredentialSchemaResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a1aa6c7279248b, []int{9}
}
func (m *MsgUpdateCredentialSchemaResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateCredentialSchemaResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateCredentialSchemaResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateCredentialSchemaResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateCredentialSchemaResponse.Merge(m, src)
}
func (m *MsgUpdateCredentialSchemaResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateCredentialSchemaResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateCredentialSchemaResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateCredentialSchemaResponse proto.InternalMessageInfo

type MsgRegisterCredentialStatus struct {
	CredentialStatusDocument *CredentialStatusDocument `protobuf:"bytes,1,opt,name=credentialStatusDocument,proto3" json:"credentialStatusDocument,omitempty"`
	CredentialStatusProof    *DocumentProof            `protobuf:"bytes,2,opt,name=credentialStatusProof,proto3" json:"credentialStatusProof,omitempty"`
	TxAuthor                 string                    `protobuf:"bytes,3,opt,name=txAuthor,proto3" json:"txAuthor,omitempty"`
}

func (m *MsgRegisterCredentialStatus) Reset()         { *m = MsgRegisterCredentialStatus{} }
func (m *MsgRegisterCredentialStatus) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterCredentialStatus) ProtoMessage()    {}
func (*MsgRegisterCredentialStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a1aa6c7279248b, []int{10}
}
func (m *MsgRegisterCredentialStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterCredentialStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterCredentialStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterCredentialStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterCredentialStatus.Merge(m, src)
}
func (m *MsgRegisterCredentialStatus) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterCredentialStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterCredentialStatus.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterCredentialStatus proto.InternalMessageInfo

func (m *MsgRegisterCredentialStatus) GetCredentialStatusDocument() *CredentialStatusDocument {
	if m != nil {
		return m.CredentialStatusDocument
	}
	return nil
}

func (m *MsgRegisterCredentialStatus) GetCredentialStatusProof() *DocumentProof {
	if m != nil {
		return m.CredentialStatusProof
	}
	return nil
}

func (m *MsgRegisterCredentialStatus) GetTxAuthor() string {
	if m != nil {
		return m.TxAuthor
	}
	return ""
}

type MsgRegisterCredentialStatusResponse struct {
}

func (m *MsgRegisterCredentialStatusResponse) Reset()         { *m = MsgRegisterCredentialStatusResponse{} }
func (m *MsgRegisterCredentialStatusResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRegisterCredentialStatusResponse) ProtoMessage()    {}
func (*MsgRegisterCredentialStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a1aa6c7279248b, []int{11}
}
func (m *MsgRegisterCredentialStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRegisterCredentialStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRegisterCredentialStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRegisterCredentialStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRegisterCredentialStatusResponse.Merge(m, src)
}
func (m *MsgRegisterCredentialStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRegisterCredentialStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRegisterCredentialStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRegisterCredentialStatusResponse proto.InternalMessageInfo

type MsgUpdateCredentialStatus struct {
	CredentialStatusDocument *CredentialStatusDocument `protobuf:"bytes,1,opt,name=credentialStatusDocument,proto3" json:"credentialStatusDocument,omitempty"`
	CredentialStatusProof    *DocumentProof            `protobuf:"bytes,2,opt,name=credentialStatusProof,proto3" json:"credentialStatusProof,omitempty"`
	TxAuthor                 string                    `protobuf:"bytes,3,opt,name=txAuthor,proto3" json:"txAuthor,omitempty"`
}

func (m *MsgUpdateCredentialStatus) Reset()         { *m = MsgUpdateCredentialStatus{} }
func (m *MsgUpdateCredentialStatus) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateCredentialStatus) ProtoMessage()    {}
func (*MsgUpdateCredentialStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a1aa6c7279248b, []int{12}
}
func (m *MsgUpdateCredentialStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateCredentialStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateCredentialStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateCredentialStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateCredentialStatus.Merge(m, src)
}
func (m *MsgUpdateCredentialStatus) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateCredentialStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateCredentialStatus.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateCredentialStatus proto.InternalMessageInfo

func (m *MsgUpdateCredentialStatus) GetCredentialStatusDocument() *CredentialStatusDocument {
	if m != nil {
		return m.CredentialStatusDocument
	}
	return nil
}

func (m *MsgUpdateCredentialStatus) GetCredentialStatusProof() *DocumentProof {
	if m != nil {
		return m.CredentialStatusProof
	}
	return nil
}

func (m *MsgUpdateCredentialStatus) GetTxAuthor() string {
	if m != nil {
		return m.TxAuthor
	}
	return ""
}

type MsgUpdateCredentialStatusResponse struct {
}

func (m *MsgUpdateCredentialStatusResponse) Reset()         { *m = MsgUpdateCredentialStatusResponse{} }
func (m *MsgUpdateCredentialStatusResponse) String() string { return proto.CompactTextString(m) }
func (*MsgUpdateCredentialStatusResponse) ProtoMessage()    {}
func (*MsgUpdateCredentialStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_73a1aa6c7279248b, []int{13}
}
func (m *MsgUpdateCredentialStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgUpdateCredentialStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgUpdateCredentialStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgUpdateCredentialStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgUpdateCredentialStatusResponse.Merge(m, src)
}
func (m *MsgUpdateCredentialStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgUpdateCredentialStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgUpdateCredentialStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgUpdateCredentialStatusResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgRegisterDID)(nil), "hypersign.ssi.v1.MsgRegisterDID")
	proto.RegisterType((*MsgRegisterDIDResponse)(nil), "hypersign.ssi.v1.MsgRegisterDIDResponse")
	proto.RegisterType((*MsgUpdateDID)(nil), "hypersign.ssi.v1.MsgUpdateDID")
	proto.RegisterType((*MsgUpdateDIDResponse)(nil), "hypersign.ssi.v1.MsgUpdateDIDResponse")
	proto.RegisterType((*MsgDeactivateDID)(nil), "hypersign.ssi.v1.MsgDeactivateDID")
	proto.RegisterType((*MsgDeactivateDIDResponse)(nil), "hypersign.ssi.v1.MsgDeactivateDIDResponse")
	proto.RegisterType((*MsgRegisterCredentialSchema)(nil), "hypersign.ssi.v1.MsgRegisterCredentialSchema")
	proto.RegisterType((*MsgRegisterCredentialSchemaResponse)(nil), "hypersign.ssi.v1.MsgRegisterCredentialSchemaResponse")
	proto.RegisterType((*MsgUpdateCredentialSchema)(nil), "hypersign.ssi.v1.MsgUpdateCredentialSchema")
	proto.RegisterType((*MsgUpdateCredentialSchemaResponse)(nil), "hypersign.ssi.v1.MsgUpdateCredentialSchemaResponse")
	proto.RegisterType((*MsgRegisterCredentialStatus)(nil), "hypersign.ssi.v1.MsgRegisterCredentialStatus")
	proto.RegisterType((*MsgRegisterCredentialStatusResponse)(nil), "hypersign.ssi.v1.MsgRegisterCredentialStatusResponse")
	proto.RegisterType((*MsgUpdateCredentialStatus)(nil), "hypersign.ssi.v1.MsgUpdateCredentialStatus")
	proto.RegisterType((*MsgUpdateCredentialStatusResponse)(nil), "hypersign.ssi.v1.MsgUpdateCredentialStatusResponse")
}

func init() { proto.RegisterFile("ssi/v1/tx.proto", fileDescriptor_73a1aa6c7279248b) }

var fileDescriptor_73a1aa6c7279248b = []byte{
	// 612 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe4, 0x96, 0x4f, 0x6f, 0xd3, 0x4c,
	0x10, 0xc6, 0xb3, 0xcd, 0xab, 0xea, 0xcd, 0x84, 0x42, 0xb0, 0x20, 0x32, 0x06, 0x4c, 0x48, 0x01,
	0x45, 0x45, 0xb1, 0xd5, 0x44, 0x9c, 0x11, 0x34, 0x97, 0x48, 0x44, 0x42, 0xae, 0x7a, 0x80, 0x4b,
	0x95, 0xda, 0x5b, 0x67, 0xa5, 0xc6, 0x6b, 0x79, 0x37, 0x51, 0xca, 0x89, 0x8f, 0xc0, 0x81, 0x8f,
	0xc3, 0x85, 0x1b, 0xc7, 0x1e, 0x7b, 0x44, 0xc9, 0x77, 0x40, 0x1c, 0x51, 0x36, 0xee, 0xc6, 0x76,
	0xec, 0xfc, 0xe9, 0xa9, 0x82, 0xa3, 0x67, 0x9e, 0x67, 0x67, 0x7f, 0xe3, 0xf1, 0xae, 0xe1, 0x0e,
	0x63, 0xc4, 0x1c, 0xee, 0x9b, 0x7c, 0x64, 0xf8, 0x01, 0xe5, 0x54, 0x29, 0xf5, 0xce, 0x7d, 0x1c,
	0x30, 0xe2, 0x7a, 0x06, 0x63, 0xc4, 0x18, 0xee, 0x6b, 0x7a, 0x28, 0xb1, 0x03, 0xec, 0x60, 0x8f,
	0x93, 0xee, 0xd9, 0x31, 0xb3, 0x7b, 0xb8, 0xdf, 0x9d, 0x39, 0xb4, 0x52, 0x98, 0x77, 0x88, 0x13,
	0x46, 0xd2, 0x1c, 0xbc, 0xcb, 0x07, 0x2c, 0xcc, 0x2b, 0x61, 0xde, 0x0f, 0x28, 0x3d, 0x9d, 0xc5,
	0xaa, 0xdf, 0x10, 0xdc, 0xee, 0x30, 0xd7, 0xc2, 0x2e, 0x61, 0x1c, 0x07, 0xad, 0x76, 0x4b, 0x79,
	0x0d, 0x45, 0x87, 0x38, 0x2d, 0x6a, 0x0f, 0xfa, 0xd8, 0xe3, 0x2a, 0xaa, 0xa0, 0x5a, 0xb1, 0xf1,
	0xd8, 0x48, 0x6e, 0xd0, 0x68, 0xcd, 0x45, 0x56, 0xd4, 0xa1, 0x74, 0xe0, 0x6e, 0xe4, 0xf1, 0xfd,
	0xb4, 0x1a, 0x53, 0xb7, 0x2a, 0xf9, 0x5a, 0xb1, 0xf1, 0x24, 0x65, 0x99, 0xa8, 0xce, 0x5a, 0x74,
	0x2a, 0x1a, 0xfc, 0xcf, 0x47, 0x6f, 0x06, 0xbc, 0x47, 0x03, 0x35, 0x5f, 0x41, 0xb5, 0x82, 0x25,
	0x9f, 0xab, 0x2a, 0x94, 0xe3, 0xbb, 0xb7, 0x30, 0xf3, 0xa9, 0xc7, 0x70, 0xf5, 0x12, 0xc1, 0xad,
	0x0e, 0x73, 0x8f, 0x7c, 0xa7, 0xcb, 0xf1, 0x4d, 0xc4, 0x7a, 0x04, 0x85, 0xe1, 0xd4, 0x42, 0xbd,
	0xb6, 0x13, 0x72, 0xcd, 0x03, 0x31, 0xe8, 0xff, 0x12, 0xd0, 0x65, 0xb8, 0x17, 0x25, 0x93, 0xc8,
	0xdf, 0x11, 0x94, 0x3a, 0xcc, 0x6d, 0xe1, 0xae, 0xcd, 0xc9, 0x30, 0xc4, 0x7e, 0x06, 0x3b, 0x91,
	0xda, 0x6d, 0x47, 0x80, 0x17, 0xac, 0x78, 0xf0, 0xe6, 0xb0, 0x69, 0xa0, 0x26, 0x11, 0x24, 0xdf,
	0x6f, 0x04, 0x0f, 0x23, 0x6f, 0xfb, 0x40, 0x8e, 0xf9, 0xa1, 0xf8, 0x2e, 0x94, 0x53, 0x50, 0xed,
	0x44, 0x2c, 0xf1, 0xba, 0xf7, 0x16, 0x59, 0x0e, 0x32, 0x1c, 0x56, 0xe6, 0x5a, 0xca, 0x11, 0xdc,
	0x4f, 0xe6, 0x04, 0xb7, 0xba, 0x25, 0x8a, 0xac, 0x6c, 0x58, 0xba, 0x7b, 0xe9, 0x9c, 0x3f, 0x87,
	0xdd, 0x25, 0xe4, 0xb2, 0x43, 0xbf, 0x10, 0x3c, 0x90, 0xa3, 0xf1, 0x2f, 0xf5, 0x67, 0x17, 0x9e,
	0x66, 0x72, 0xaf, 0x31, 0x3f, 0xe2, 0x94, 0x4c, 0xf4, 0x47, 0xc4, 0x36, 0xea, 0x4f, 0xcc, 0x61,
	0x65, 0xae, 0x95, 0xe8, 0x8f, 0xc8, 0x5d, 0xbb, 0x3f, 0x73, 0xf7, 0xf5, 0xe6, 0x47, 0xf8, 0x57,
	0xce, 0xcf, 0x5f, 0xdf, 0x9f, 0x8c, 0xf9, 0x89, 0x75, 0xa7, 0xf1, 0x75, 0x1b, 0xf2, 0x1d, 0xe6,
	0x2a, 0x1f, 0xa0, 0x18, 0xbd, 0x2f, 0x2b, 0x8b, 0xfb, 0x89, 0xdf, 0x49, 0x5a, 0x6d, 0x95, 0xe2,
	0xaa, 0x84, 0x72, 0x08, 0x85, 0xf9, 0x8d, 0xa5, 0xa7, 0xda, 0x64, 0x5e, 0x7b, 0xb1, 0x3c, 0x2f,
	0x17, 0x3d, 0x86, 0x9d, 0xf8, 0x9d, 0x50, 0x4d, 0x35, 0xc6, 0x34, 0xda, 0xde, 0x6a, 0x8d, 0x2c,
	0xf0, 0x19, 0x81, 0x9a, 0x79, 0x2a, 0xd7, 0x97, 0xc2, 0x27, 0xe5, 0xda, 0xab, 0x8d, 0xe4, 0x72,
	0x0b, 0x9f, 0xa0, 0x9c, 0x71, 0xea, 0xbd, 0x5c, 0xd2, 0xa5, 0x85, 0xea, 0xcd, 0x0d, 0xc4, 0xab,
	0xf0, 0x67, 0x1f, 0xcd, 0xda, 0xf8, 0x42, 0xbe, 0x3e, 0x7e, 0x6c, 0x34, 0x53, 0xf1, 0x67, 0xf5,
	0xd7, 0xc4, 0x9f, 0x55, 0x6f, 0x6e, 0x20, 0xbe, 0xaa, 0xfd, 0xf6, 0xdd, 0x8f, 0xb1, 0x8e, 0x2e,
	0xc6, 0x3a, 0xfa, 0x39, 0xd6, 0xd1, 0x97, 0x89, 0x9e, 0xbb, 0x98, 0xe8, 0xb9, 0xcb, 0x89, 0x9e,
	0xfb, 0xd8, 0x70, 0x09, 0xef, 0x0d, 0x4e, 0x0c, 0x9b, 0xf6, 0x4d, 0xb9, 0x70, 0x5d, 0xfc, 0x78,
	0xda, 0xf4, 0xcc, 0xec, 0x11, 0xa7, 0xee, 0x51, 0x07, 0x9b, 0x23, 0x73, 0xfa, 0x67, 0xca, 0xcf,
	0x7d, 0xcc, 0x4e, 0xb6, 0x45, 0xba, 0xf9, 0x27, 0x00, 0x00, 0xff, 0xff, 0xbf, 0xe5, 0x50, 0x92,
	0x22, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	RegisterDID(ctx context.Context, in *MsgRegisterDID, opts ...grpc.CallOption) (*MsgRegisterDIDResponse, error)
	UpdateDID(ctx context.Context, in *MsgUpdateDID, opts ...grpc.CallOption) (*MsgUpdateDIDResponse, error)
	DeactivateDID(ctx context.Context, in *MsgDeactivateDID, opts ...grpc.CallOption) (*MsgDeactivateDIDResponse, error)
	RegisterCredentialSchema(ctx context.Context, in *MsgRegisterCredentialSchema, opts ...grpc.CallOption) (*MsgRegisterCredentialSchemaResponse, error)
	UpdateCredentialSchema(ctx context.Context, in *MsgUpdateCredentialSchema, opts ...grpc.CallOption) (*MsgUpdateCredentialSchemaResponse, error)
	RegisterCredentialStatus(ctx context.Context, in *MsgRegisterCredentialStatus, opts ...grpc.CallOption) (*MsgRegisterCredentialStatusResponse, error)
	UpdateCredentialStatus(ctx context.Context, in *MsgUpdateCredentialStatus, opts ...grpc.CallOption) (*MsgUpdateCredentialStatusResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RegisterDID(ctx context.Context, in *MsgRegisterDID, opts ...grpc.CallOption) (*MsgRegisterDIDResponse, error) {
	out := new(MsgRegisterDIDResponse)
	err := c.cc.Invoke(ctx, "/hypersign.ssi.v1.Msg/RegisterDID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateDID(ctx context.Context, in *MsgUpdateDID, opts ...grpc.CallOption) (*MsgUpdateDIDResponse, error) {
	out := new(MsgUpdateDIDResponse)
	err := c.cc.Invoke(ctx, "/hypersign.ssi.v1.Msg/UpdateDID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) DeactivateDID(ctx context.Context, in *MsgDeactivateDID, opts ...grpc.CallOption) (*MsgDeactivateDIDResponse, error) {
	out := new(MsgDeactivateDIDResponse)
	err := c.cc.Invoke(ctx, "/hypersign.ssi.v1.Msg/DeactivateDID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterCredentialSchema(ctx context.Context, in *MsgRegisterCredentialSchema, opts ...grpc.CallOption) (*MsgRegisterCredentialSchemaResponse, error) {
	out := new(MsgRegisterCredentialSchemaResponse)
	err := c.cc.Invoke(ctx, "/hypersign.ssi.v1.Msg/RegisterCredentialSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateCredentialSchema(ctx context.Context, in *MsgUpdateCredentialSchema, opts ...grpc.CallOption) (*MsgUpdateCredentialSchemaResponse, error) {
	out := new(MsgUpdateCredentialSchemaResponse)
	err := c.cc.Invoke(ctx, "/hypersign.ssi.v1.Msg/UpdateCredentialSchema", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) RegisterCredentialStatus(ctx context.Context, in *MsgRegisterCredentialStatus, opts ...grpc.CallOption) (*MsgRegisterCredentialStatusResponse, error) {
	out := new(MsgRegisterCredentialStatusResponse)
	err := c.cc.Invoke(ctx, "/hypersign.ssi.v1.Msg/RegisterCredentialStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) UpdateCredentialStatus(ctx context.Context, in *MsgUpdateCredentialStatus, opts ...grpc.CallOption) (*MsgUpdateCredentialStatusResponse, error) {
	out := new(MsgUpdateCredentialStatusResponse)
	err := c.cc.Invoke(ctx, "/hypersign.ssi.v1.Msg/UpdateCredentialStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	RegisterDID(context.Context, *MsgRegisterDID) (*MsgRegisterDIDResponse, error)
	UpdateDID(context.Context, *MsgUpdateDID) (*MsgUpdateDIDResponse, error)
	DeactivateDID(context.Context, *MsgDeactivateDID) (*MsgDeactivateDIDResponse, error)
	RegisterCredentialSchema(context.Context, *MsgRegisterCredentialSchema) (*MsgRegisterCredentialSchemaResponse, error)
	UpdateCredentialSchema(context.Context, *MsgUpdateCredentialSchema) (*MsgUpdateCredentialSchemaResponse, error)
	RegisterCredentialStatus(context.Context, *MsgRegisterCredentialStatus) (*MsgRegisterCredentialStatusResponse, error)
	UpdateCredentialStatus(context.Context, *MsgUpdateCredentialStatus) (*MsgUpdateCredentialStatusResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) RegisterDID(ctx context.Context, req *MsgRegisterDID) (*MsgRegisterDIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterDID not implemented")
}
func (*UnimplementedMsgServer) UpdateDID(ctx context.Context, req *MsgUpdateDID) (*MsgUpdateDIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDID not implemented")
}
func (*UnimplementedMsgServer) DeactivateDID(ctx context.Context, req *MsgDeactivateDID) (*MsgDeactivateDIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeactivateDID not implemented")
}
func (*UnimplementedMsgServer) RegisterCredentialSchema(ctx context.Context, req *MsgRegisterCredentialSchema) (*MsgRegisterCredentialSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCredentialSchema not implemented")
}
func (*UnimplementedMsgServer) UpdateCredentialSchema(ctx context.Context, req *MsgUpdateCredentialSchema) (*MsgUpdateCredentialSchemaResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCredentialSchema not implemented")
}
func (*UnimplementedMsgServer) RegisterCredentialStatus(ctx context.Context, req *MsgRegisterCredentialStatus) (*MsgRegisterCredentialStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterCredentialStatus not implemented")
}
func (*UnimplementedMsgServer) UpdateCredentialStatus(ctx context.Context, req *MsgUpdateCredentialStatus) (*MsgUpdateCredentialStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateCredentialStatus not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_RegisterDID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterDID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterDID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hypersign.ssi.v1.Msg/RegisterDID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterDID(ctx, req.(*MsgRegisterDID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateDID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateDID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateDID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hypersign.ssi.v1.Msg/UpdateDID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateDID(ctx, req.(*MsgUpdateDID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_DeactivateDID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgDeactivateDID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).DeactivateDID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hypersign.ssi.v1.Msg/DeactivateDID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).DeactivateDID(ctx, req.(*MsgDeactivateDID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterCredentialSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterCredentialSchema)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterCredentialSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hypersign.ssi.v1.Msg/RegisterCredentialSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterCredentialSchema(ctx, req.(*MsgRegisterCredentialSchema))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateCredentialSchema_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateCredentialSchema)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateCredentialSchema(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hypersign.ssi.v1.Msg/UpdateCredentialSchema",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateCredentialSchema(ctx, req.(*MsgUpdateCredentialSchema))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_RegisterCredentialStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRegisterCredentialStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RegisterCredentialStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hypersign.ssi.v1.Msg/RegisterCredentialStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RegisterCredentialStatus(ctx, req.(*MsgRegisterCredentialStatus))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_UpdateCredentialStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgUpdateCredentialStatus)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).UpdateCredentialStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/hypersign.ssi.v1.Msg/UpdateCredentialStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).UpdateCredentialStatus(ctx, req.(*MsgUpdateCredentialStatus))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "hypersign.ssi.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterDID",
			Handler:    _Msg_RegisterDID_Handler,
		},
		{
			MethodName: "UpdateDID",
			Handler:    _Msg_UpdateDID_Handler,
		},
		{
			MethodName: "DeactivateDID",
			Handler:    _Msg_DeactivateDID_Handler,
		},
		{
			MethodName: "RegisterCredentialSchema",
			Handler:    _Msg_RegisterCredentialSchema_Handler,
		},
		{
			MethodName: "UpdateCredentialSchema",
			Handler:    _Msg_UpdateCredentialSchema_Handler,
		},
		{
			MethodName: "RegisterCredentialStatus",
			Handler:    _Msg_RegisterCredentialStatus_Handler,
		},
		{
			MethodName: "UpdateCredentialStatus",
			Handler:    _Msg_UpdateCredentialStatus_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ssi/v1/tx.proto",
}

func (m *MsgRegisterDID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterDID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterDID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxAuthor) > 0 {
		i -= len(m.TxAuthor)
		copy(dAtA[i:], m.TxAuthor)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TxAuthor)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DidDocumentProofs) > 0 {
		for iNdEx := len(m.DidDocumentProofs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DidDocumentProofs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.DidDocument != nil {
		{
			size, err := m.DidDocument.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterDIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterDIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterDIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateDID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateDID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateDID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxAuthor) > 0 {
		i -= len(m.TxAuthor)
		copy(dAtA[i:], m.TxAuthor)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TxAuthor)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.VersionId) > 0 {
		i -= len(m.VersionId)
		copy(dAtA[i:], m.VersionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VersionId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DidDocumentProofs) > 0 {
		for iNdEx := len(m.DidDocumentProofs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DidDocumentProofs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.DidDocument != nil {
		{
			size, err := m.DidDocument.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateDIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateDIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateDIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgDeactivateDID) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeactivateDID) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeactivateDID) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxAuthor) > 0 {
		i -= len(m.TxAuthor)
		copy(dAtA[i:], m.TxAuthor)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TxAuthor)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.VersionId) > 0 {
		i -= len(m.VersionId)
		copy(dAtA[i:], m.VersionId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.VersionId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.DidDocumentProofs) > 0 {
		for iNdEx := len(m.DidDocumentProofs) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DidDocumentProofs[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTx(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.DidDocumentId) > 0 {
		i -= len(m.DidDocumentId)
		copy(dAtA[i:], m.DidDocumentId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.DidDocumentId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgDeactivateDIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgDeactivateDIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgDeactivateDIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRegisterCredentialSchema) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterCredentialSchema) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterCredentialSchema) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxAuthor) > 0 {
		i -= len(m.TxAuthor)
		copy(dAtA[i:], m.TxAuthor)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TxAuthor)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CredentialSchemaProof != nil {
		{
			size, err := m.CredentialSchemaProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.CredentialSchemaDocument != nil {
		{
			size, err := m.CredentialSchemaDocument.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterCredentialSchemaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterCredentialSchemaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterCredentialSchemaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateCredentialSchema) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateCredentialSchema) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateCredentialSchema) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxAuthor) > 0 {
		i -= len(m.TxAuthor)
		copy(dAtA[i:], m.TxAuthor)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TxAuthor)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CredentialSchemaProof != nil {
		{
			size, err := m.CredentialSchemaProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.CredentialSchemaDocument != nil {
		{
			size, err := m.CredentialSchemaDocument.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateCredentialSchemaResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateCredentialSchemaResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateCredentialSchemaResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgRegisterCredentialStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterCredentialStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterCredentialStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxAuthor) > 0 {
		i -= len(m.TxAuthor)
		copy(dAtA[i:], m.TxAuthor)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TxAuthor)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CredentialStatusProof != nil {
		{
			size, err := m.CredentialStatusProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.CredentialStatusDocument != nil {
		{
			size, err := m.CredentialStatusDocument.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRegisterCredentialStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRegisterCredentialStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRegisterCredentialStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgUpdateCredentialStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateCredentialStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateCredentialStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxAuthor) > 0 {
		i -= len(m.TxAuthor)
		copy(dAtA[i:], m.TxAuthor)
		i = encodeVarintTx(dAtA, i, uint64(len(m.TxAuthor)))
		i--
		dAtA[i] = 0x1a
	}
	if m.CredentialStatusProof != nil {
		{
			size, err := m.CredentialStatusProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.CredentialStatusDocument != nil {
		{
			size, err := m.CredentialStatusDocument.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgUpdateCredentialStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgUpdateCredentialStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgUpdateCredentialStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRegisterDID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DidDocument != nil {
		l = m.DidDocument.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.DidDocumentProofs) > 0 {
		for _, e := range m.DidDocumentProofs {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.TxAuthor)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterDIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateDID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DidDocument != nil {
		l = m.DidDocument.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.DidDocumentProofs) > 0 {
		for _, e := range m.DidDocumentProofs {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.VersionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TxAuthor)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateDIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgDeactivateDID) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DidDocumentId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if len(m.DidDocumentProofs) > 0 {
		for _, e := range m.DidDocumentProofs {
			l = e.Size()
			n += 1 + l + sovTx(uint64(l))
		}
	}
	l = len(m.VersionId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TxAuthor)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgDeactivateDIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRegisterCredentialSchema) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CredentialSchemaDocument != nil {
		l = m.CredentialSchemaDocument.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CredentialSchemaProof != nil {
		l = m.CredentialSchemaProof.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TxAuthor)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterCredentialSchemaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateCredentialSchema) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CredentialSchemaDocument != nil {
		l = m.CredentialSchemaDocument.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CredentialSchemaProof != nil {
		l = m.CredentialSchemaProof.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TxAuthor)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateCredentialSchemaResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgRegisterCredentialStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CredentialStatusDocument != nil {
		l = m.CredentialStatusDocument.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CredentialStatusProof != nil {
		l = m.CredentialStatusProof.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TxAuthor)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRegisterCredentialStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgUpdateCredentialStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CredentialStatusDocument != nil {
		l = m.CredentialStatusDocument.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.CredentialStatusProof != nil {
		l = m.CredentialStatusProof.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.TxAuthor)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgUpdateCredentialStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRegisterDID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterDID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterDID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DidDocument", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DidDocument == nil {
				m.DidDocument = &DidDocument{}
			}
			if err := m.DidDocument.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DidDocumentProofs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DidDocumentProofs = append(m.DidDocumentProofs, &DocumentProof{})
			if err := m.DidDocumentProofs[len(m.DidDocumentProofs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxAuthor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxAuthor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterDIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterDIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterDIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateDID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateDID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateDID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DidDocument", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.DidDocument == nil {
				m.DidDocument = &DidDocument{}
			}
			if err := m.DidDocument.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DidDocumentProofs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DidDocumentProofs = append(m.DidDocumentProofs, &DocumentProof{})
			if err := m.DidDocumentProofs[len(m.DidDocumentProofs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VersionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxAuthor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxAuthor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateDIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateDIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateDIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeactivateDID) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeactivateDID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeactivateDID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DidDocumentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DidDocumentId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DidDocumentProofs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DidDocumentProofs = append(m.DidDocumentProofs, &DocumentProof{})
			if err := m.DidDocumentProofs[len(m.DidDocumentProofs)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VersionId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VersionId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxAuthor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxAuthor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgDeactivateDIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgDeactivateDIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgDeactivateDIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterCredentialSchema) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterCredentialSchema: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterCredentialSchema: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialSchemaDocument", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CredentialSchemaDocument == nil {
				m.CredentialSchemaDocument = &CredentialSchemaDocument{}
			}
			if err := m.CredentialSchemaDocument.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialSchemaProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CredentialSchemaProof == nil {
				m.CredentialSchemaProof = &DocumentProof{}
			}
			if err := m.CredentialSchemaProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxAuthor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxAuthor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterCredentialSchemaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterCredentialSchemaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterCredentialSchemaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateCredentialSchema) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateCredentialSchema: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateCredentialSchema: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialSchemaDocument", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CredentialSchemaDocument == nil {
				m.CredentialSchemaDocument = &CredentialSchemaDocument{}
			}
			if err := m.CredentialSchemaDocument.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialSchemaProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CredentialSchemaProof == nil {
				m.CredentialSchemaProof = &DocumentProof{}
			}
			if err := m.CredentialSchemaProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxAuthor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxAuthor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateCredentialSchemaResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateCredentialSchemaResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateCredentialSchemaResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterCredentialStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterCredentialStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterCredentialStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialStatusDocument", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CredentialStatusDocument == nil {
				m.CredentialStatusDocument = &CredentialStatusDocument{}
			}
			if err := m.CredentialStatusDocument.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialStatusProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CredentialStatusProof == nil {
				m.CredentialStatusProof = &DocumentProof{}
			}
			if err := m.CredentialStatusProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxAuthor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxAuthor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRegisterCredentialStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRegisterCredentialStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRegisterCredentialStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateCredentialStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateCredentialStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateCredentialStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialStatusDocument", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CredentialStatusDocument == nil {
				m.CredentialStatusDocument = &CredentialStatusDocument{}
			}
			if err := m.CredentialStatusDocument.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialStatusProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CredentialStatusProof == nil {
				m.CredentialStatusProof = &DocumentProof{}
			}
			if err := m.CredentialStatusProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxAuthor", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxAuthor = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgUpdateCredentialStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgUpdateCredentialStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgUpdateCredentialStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
