// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ssi/v1/proof.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DocumentProof struct {
	Type               string         `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Created            string         `protobuf:"bytes,2,opt,name=created,proto3" json:"created,omitempty"`
	VerificationMethod string         `protobuf:"bytes,3,opt,name=verificationMethod,proto3" json:"verificationMethod,omitempty"`
	ProofPurpose       string         `protobuf:"bytes,4,opt,name=proofPurpose,proto3" json:"proofPurpose,omitempty"`
	ProofValue         string         `protobuf:"bytes,5,opt,name=proofValue,proto3" json:"proofValue,omitempty"`
	ClientSpecType     ClientSpecType `protobuf:"varint,6,opt,name=clientSpecType,proto3,enum=hypersign.ssi.v1.ClientSpecType" json:"clientSpecType,omitempty"`
}

func (m *DocumentProof) Reset()         { *m = DocumentProof{} }
func (m *DocumentProof) String() string { return proto.CompactTextString(m) }
func (*DocumentProof) ProtoMessage()    {}
func (*DocumentProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_0b5e641dcc78ecd3, []int{0}
}
func (m *DocumentProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DocumentProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DocumentProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DocumentProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DocumentProof.Merge(m, src)
}
func (m *DocumentProof) XXX_Size() int {
	return m.Size()
}
func (m *DocumentProof) XXX_DiscardUnknown() {
	xxx_messageInfo_DocumentProof.DiscardUnknown(m)
}

var xxx_messageInfo_DocumentProof proto.InternalMessageInfo

func (m *DocumentProof) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *DocumentProof) GetCreated() string {
	if m != nil {
		return m.Created
	}
	return ""
}

func (m *DocumentProof) GetVerificationMethod() string {
	if m != nil {
		return m.VerificationMethod
	}
	return ""
}

func (m *DocumentProof) GetProofPurpose() string {
	if m != nil {
		return m.ProofPurpose
	}
	return ""
}

func (m *DocumentProof) GetProofValue() string {
	if m != nil {
		return m.ProofValue
	}
	return ""
}

func (m *DocumentProof) GetClientSpecType() ClientSpecType {
	if m != nil {
		return m.ClientSpecType
	}
	return CLIENT_SPEC_TYPE_NONE
}

func init() {
	proto.RegisterType((*DocumentProof)(nil), "hypersign.ssi.v1.DocumentProof")
}

func init() { proto.RegisterFile("ssi/v1/proof.proto", fileDescriptor_0b5e641dcc78ecd3) }

var fileDescriptor_0b5e641dcc78ecd3 = []byte{
	// 289 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xb1, 0x4e, 0xc3, 0x30,
	0x14, 0x45, 0x63, 0x28, 0x45, 0x58, 0x50, 0x21, 0x4f, 0x16, 0x83, 0x15, 0x75, 0xea, 0x52, 0x5b,
	0x2d, 0x7f, 0x00, 0x0c, 0x0c, 0x20, 0x55, 0x05, 0x31, 0xb0, 0xa0, 0xd4, 0x79, 0x6d, 0x2c, 0xa5,
	0xb1, 0x65, 0x3b, 0x11, 0xfd, 0x0b, 0x3e, 0x8b, 0xb1, 0x23, 0x23, 0x4a, 0x3e, 0x83, 0x05, 0xc5,
	0x05, 0x44, 0xab, 0x6e, 0x7e, 0xf7, 0x1d, 0x3f, 0xdd, 0x7b, 0x31, 0x71, 0x4e, 0x89, 0x6a, 0x24,
	0x8c, 0xd5, 0x7a, 0xce, 0x8d, 0xd5, 0x5e, 0x93, 0xf3, 0x6c, 0x65, 0xc0, 0x3a, 0xb5, 0x28, 0xb8,
	0x73, 0x8a, 0x57, 0xa3, 0x0b, 0xfa, 0x43, 0xc9, 0x5c, 0x41, 0xe1, 0x5f, 0x9c, 0x01, 0xb9, 0x61,
	0xfb, 0x5f, 0x08, 0x9f, 0xdd, 0x68, 0x59, 0x2e, 0xa1, 0xf0, 0x93, 0xf6, 0x06, 0x21, 0xb8, 0xe3,
	0x57, 0x06, 0x28, 0x8a, 0xd1, 0xe0, 0x64, 0x1a, 0xde, 0x84, 0xe2, 0x63, 0x69, 0x21, 0xf1, 0x90,
	0xd2, 0x83, 0x20, 0xff, 0x8e, 0x84, 0x63, 0x52, 0x81, 0x55, 0x73, 0x25, 0x13, 0xaf, 0x74, 0x71,
	0x0f, 0x3e, 0xd3, 0x29, 0x3d, 0x0c, 0xd0, 0x9e, 0x0d, 0xe9, 0xe3, 0xd3, 0x60, 0x75, 0x52, 0x5a,
	0xa3, 0x1d, 0xd0, 0x4e, 0x20, 0xb7, 0x34, 0xc2, 0x30, 0x0e, 0xf3, 0x53, 0x92, 0x97, 0x40, 0x8f,
	0x02, 0xf1, 0x4f, 0x21, 0xb7, 0xb8, 0xb7, 0x09, 0xf2, 0x60, 0x40, 0x3e, 0xb6, 0x5e, 0xbb, 0x31,
	0x1a, 0xf4, 0xc6, 0x31, 0xdf, 0x0d, 0xce, 0xaf, 0xb7, 0xb8, 0xe9, 0xce, 0xbf, 0xab, 0xbb, 0xf7,
	0x9a, 0xa1, 0x75, 0xcd, 0xd0, 0x67, 0xcd, 0xd0, 0x5b, 0xc3, 0xa2, 0x75, 0xc3, 0xa2, 0x8f, 0x86,
	0x45, 0xcf, 0xe3, 0x85, 0xf2, 0x59, 0x39, 0xe3, 0x52, 0x2f, 0xc5, 0xdf, 0xd5, 0x61, 0xe8, 0x4c,
	0xea, 0x5c, 0x64, 0x2a, 0x1d, 0x16, 0x3a, 0x05, 0xf1, 0x2a, 0xda, 0x6a, 0xdb, 0x92, 0xdc, 0xac,
	0x1b, 0xd6, 0x97, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x37, 0x56, 0x5e, 0x05, 0x94, 0x01, 0x00,
	0x00,
}

func (m *DocumentProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DocumentProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DocumentProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ClientSpecType != 0 {
		i = encodeVarintProof(dAtA, i, uint64(m.ClientSpecType))
		i--
		dAtA[i] = 0x30
	}
	if len(m.ProofValue) > 0 {
		i -= len(m.ProofValue)
		copy(dAtA[i:], m.ProofValue)
		i = encodeVarintProof(dAtA, i, uint64(len(m.ProofValue)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.ProofPurpose) > 0 {
		i -= len(m.ProofPurpose)
		copy(dAtA[i:], m.ProofPurpose)
		i = encodeVarintProof(dAtA, i, uint64(len(m.ProofPurpose)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.VerificationMethod) > 0 {
		i -= len(m.VerificationMethod)
		copy(dAtA[i:], m.VerificationMethod)
		i = encodeVarintProof(dAtA, i, uint64(len(m.VerificationMethod)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Created) > 0 {
		i -= len(m.Created)
		copy(dAtA[i:], m.Created)
		i = encodeVarintProof(dAtA, i, uint64(len(m.Created)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintProof(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintProof(dAtA []byte, offset int, v uint64) int {
	offset -= sovProof(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DocumentProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovProof(uint64(l))
	}
	l = len(m.Created)
	if l > 0 {
		n += 1 + l + sovProof(uint64(l))
	}
	l = len(m.VerificationMethod)
	if l > 0 {
		n += 1 + l + sovProof(uint64(l))
	}
	l = len(m.ProofPurpose)
	if l > 0 {
		n += 1 + l + sovProof(uint64(l))
	}
	l = len(m.ProofValue)
	if l > 0 {
		n += 1 + l + sovProof(uint64(l))
	}
	if m.ClientSpecType != 0 {
		n += 1 + sovProof(uint64(m.ClientSpecType))
	}
	return n
}

func sovProof(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProof(x uint64) (n int) {
	return sovProof(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DocumentProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProof
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DocumentProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DocumentProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProof
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Created", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProof
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Created = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerificationMethod", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProof
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VerificationMethod = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofPurpose", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProof
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofPurpose = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProofValue", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProof
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProof
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProofValue = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientSpecType", wireType)
			}
			m.ClientSpecType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProof
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ClientSpecType |= ClientSpecType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProof(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProof
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProof(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProof
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProof
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProof
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProof
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProof
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProof
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProof        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProof          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProof = fmt.Errorf("proto: unexpected end of group")
)
