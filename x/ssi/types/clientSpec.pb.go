// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ssi/v1/clientSpec.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ClientSpec struct {
	Type                string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Adr036SignerAddress string `protobuf:"bytes,2,opt,name=adr036SignerAddress,proto3" json:"adr036SignerAddress,omitempty"`
}

func (m *ClientSpec) Reset()         { *m = ClientSpec{} }
func (m *ClientSpec) String() string { return proto.CompactTextString(m) }
func (*ClientSpec) ProtoMessage()    {}
func (*ClientSpec) Descriptor() ([]byte, []int) {
	return fileDescriptor_9073ac3e959d95c1, []int{0}
}
func (m *ClientSpec) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ClientSpec) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ClientSpec.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ClientSpec) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ClientSpec.Merge(m, src)
}
func (m *ClientSpec) XXX_Size() int {
	return m.Size()
}
func (m *ClientSpec) XXX_DiscardUnknown() {
	xxx_messageInfo_ClientSpec.DiscardUnknown(m)
}

var xxx_messageInfo_ClientSpec proto.InternalMessageInfo

func (m *ClientSpec) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *ClientSpec) GetAdr036SignerAddress() string {
	if m != nil {
		return m.Adr036SignerAddress
	}
	return ""
}

func init() {
	proto.RegisterType((*ClientSpec)(nil), "hypersignprotocol.hidnode.ssi.ClientSpec")
}

func init() { proto.RegisterFile("ssi/v1/clientSpec.proto", fileDescriptor_9073ac3e959d95c1) }

var fileDescriptor_9073ac3e959d95c1 = []byte{
	// 196 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2f, 0x2e, 0xce, 0xd4,
	0x2f, 0x33, 0xd4, 0x4f, 0xce, 0xc9, 0x4c, 0xcd, 0x2b, 0x09, 0x2e, 0x48, 0x4d, 0xd6, 0x2b, 0x28,
	0xca, 0x2f, 0xc9, 0x17, 0x92, 0xcd, 0xa8, 0x2c, 0x48, 0x2d, 0x2a, 0xce, 0x4c, 0xcf, 0x03, 0xf3,
	0x93, 0xf3, 0x73, 0xf4, 0x32, 0x32, 0x53, 0xf2, 0xf2, 0x53, 0x52, 0xf5, 0x8a, 0x8b, 0x33, 0x95,
	0x82, 0xb8, 0xb8, 0x9c, 0xe1, 0x5a, 0x84, 0x84, 0xb8, 0x58, 0x4a, 0x2a, 0x0b, 0x52, 0x25, 0x18,
	0x15, 0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c, 0x21, 0x03, 0x2e, 0xe1, 0xc4, 0x94, 0x22, 0x03, 0x63,
	0xb3, 0xe0, 0xcc, 0xf4, 0xbc, 0xd4, 0x22, 0xc7, 0x94, 0x94, 0xa2, 0xd4, 0xe2, 0x62, 0x09, 0x26,
	0xb0, 0x12, 0x6c, 0x52, 0x4e, 0x3e, 0x27, 0x1e, 0xc9, 0x31, 0x5e, 0x78, 0x24, 0xc7, 0xf8, 0xe0,
	0x91, 0x1c, 0xe3, 0x84, 0xc7, 0x72, 0x0c, 0x17, 0x1e, 0xcb, 0x31, 0xdc, 0x78, 0x2c, 0xc7, 0x10,
	0x65, 0x94, 0x9e, 0x59, 0x92, 0x51, 0x9a, 0xa4, 0x97, 0x9c, 0x9f, 0xab, 0x0f, 0x77, 0x97, 0x2e,
	0xcc, 0x61, 0xfa, 0x19, 0x99, 0x29, 0xba, 0x20, 0x97, 0xe9, 0x57, 0xe8, 0x83, 0xbc, 0x03, 0xb2,
	0xbe, 0x38, 0x89, 0x0d, 0x2c, 0x6d, 0x0c, 0x08, 0x00, 0x00, 0xff, 0xff, 0x37, 0x23, 0x08, 0xe7,
	0xe2, 0x00, 0x00, 0x00,
}

func (m *ClientSpec) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ClientSpec) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ClientSpec) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Adr036SignerAddress) > 0 {
		i -= len(m.Adr036SignerAddress)
		copy(dAtA[i:], m.Adr036SignerAddress)
		i = encodeVarintClientSpec(dAtA, i, uint64(len(m.Adr036SignerAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintClientSpec(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintClientSpec(dAtA []byte, offset int, v uint64) int {
	offset -= sovClientSpec(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ClientSpec) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovClientSpec(uint64(l))
	}
	l = len(m.Adr036SignerAddress)
	if l > 0 {
		n += 1 + l + sovClientSpec(uint64(l))
	}
	return n
}

func sovClientSpec(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozClientSpec(x uint64) (n int) {
	return sovClientSpec(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ClientSpec) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowClientSpec
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ClientSpec: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ClientSpec: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Adr036SignerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowClientSpec
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthClientSpec
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthClientSpec
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Adr036SignerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipClientSpec(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthClientSpec
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipClientSpec(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowClientSpec
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClientSpec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowClientSpec
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthClientSpec
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupClientSpec
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthClientSpec
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthClientSpec        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowClientSpec          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupClientSpec = fmt.Errorf("proto: unexpected end of group")
)
