// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ssi/v1/credential_status.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CredentialStatusDocument struct {
	Id             string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Revoked        bool   `protobuf:"varint,2,opt,name=revoked,proto3" json:"revoked,omitempty"`
	Suspended      bool   `protobuf:"varint,3,opt,name=suspended,proto3" json:"suspended,omitempty"`
	Remarks        string `protobuf:"bytes,4,opt,name=remarks,proto3" json:"remarks,omitempty"`
	Issuer         string `protobuf:"bytes,5,opt,name=issuer,proto3" json:"issuer,omitempty"`
	IssuanceDate   string `protobuf:"bytes,6,opt,name=issuanceDate,proto3" json:"issuanceDate,omitempty"`
	MerkleRootHash string `protobuf:"bytes,7,opt,name=merkleRootHash,proto3" json:"merkleRootHash,omitempty"`
}

func (m *CredentialStatusDocument) Reset()         { *m = CredentialStatusDocument{} }
func (m *CredentialStatusDocument) String() string { return proto.CompactTextString(m) }
func (*CredentialStatusDocument) ProtoMessage()    {}
func (*CredentialStatusDocument) Descriptor() ([]byte, []int) {
	return fileDescriptor_9807097035021c62, []int{0}
}
func (m *CredentialStatusDocument) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CredentialStatusDocument) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CredentialStatusDocument.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CredentialStatusDocument) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CredentialStatusDocument.Merge(m, src)
}
func (m *CredentialStatusDocument) XXX_Size() int {
	return m.Size()
}
func (m *CredentialStatusDocument) XXX_DiscardUnknown() {
	xxx_messageInfo_CredentialStatusDocument.DiscardUnknown(m)
}

var xxx_messageInfo_CredentialStatusDocument proto.InternalMessageInfo

func (m *CredentialStatusDocument) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *CredentialStatusDocument) GetRevoked() bool {
	if m != nil {
		return m.Revoked
	}
	return false
}

func (m *CredentialStatusDocument) GetSuspended() bool {
	if m != nil {
		return m.Suspended
	}
	return false
}

func (m *CredentialStatusDocument) GetRemarks() string {
	if m != nil {
		return m.Remarks
	}
	return ""
}

func (m *CredentialStatusDocument) GetIssuer() string {
	if m != nil {
		return m.Issuer
	}
	return ""
}

func (m *CredentialStatusDocument) GetIssuanceDate() string {
	if m != nil {
		return m.IssuanceDate
	}
	return ""
}

func (m *CredentialStatusDocument) GetMerkleRootHash() string {
	if m != nil {
		return m.MerkleRootHash
	}
	return ""
}

type CredentialStatusState struct {
	CredentialStatusDocument *CredentialStatusDocument `protobuf:"bytes,1,opt,name=credentialStatusDocument,proto3" json:"credentialStatusDocument,omitempty"`
	CredentialStatusProof    *DocumentProof            `protobuf:"bytes,2,opt,name=credentialStatusProof,proto3" json:"credentialStatusProof,omitempty"`
}

func (m *CredentialStatusState) Reset()         { *m = CredentialStatusState{} }
func (m *CredentialStatusState) String() string { return proto.CompactTextString(m) }
func (*CredentialStatusState) ProtoMessage()    {}
func (*CredentialStatusState) Descriptor() ([]byte, []int) {
	return fileDescriptor_9807097035021c62, []int{1}
}
func (m *CredentialStatusState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CredentialStatusState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CredentialStatusState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CredentialStatusState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CredentialStatusState.Merge(m, src)
}
func (m *CredentialStatusState) XXX_Size() int {
	return m.Size()
}
func (m *CredentialStatusState) XXX_DiscardUnknown() {
	xxx_messageInfo_CredentialStatusState.DiscardUnknown(m)
}

var xxx_messageInfo_CredentialStatusState proto.InternalMessageInfo

func (m *CredentialStatusState) GetCredentialStatusDocument() *CredentialStatusDocument {
	if m != nil {
		return m.CredentialStatusDocument
	}
	return nil
}

func (m *CredentialStatusState) GetCredentialStatusProof() *DocumentProof {
	if m != nil {
		return m.CredentialStatusProof
	}
	return nil
}

func init() {
	proto.RegisterType((*CredentialStatusDocument)(nil), "hypersign.ssi.v1.CredentialStatusDocument")
	proto.RegisterType((*CredentialStatusState)(nil), "hypersign.ssi.v1.CredentialStatusState")
}

func init() { proto.RegisterFile("ssi/v1/credential_status.proto", fileDescriptor_9807097035021c62) }

var fileDescriptor_9807097035021c62 = []byte{
	// 351 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0xcd, 0x4e, 0x32, 0x31,
	0x14, 0xa5, 0x7c, 0xdf, 0x07, 0x1f, 0xc5, 0x10, 0xd3, 0x04, 0xd3, 0x18, 0x33, 0x12, 0x16, 0x86,
	0x98, 0x30, 0x13, 0xf0, 0x0d, 0x94, 0x85, 0x0b, 0x17, 0x66, 0x8c, 0x1b, 0x37, 0x66, 0x98, 0x5e,
	0x98, 0x06, 0x66, 0x3a, 0xe9, 0xed, 0x10, 0x79, 0x0b, 0x1f, 0xcb, 0x25, 0x2b, 0xe3, 0x92, 0xc0,
	0x8b, 0x98, 0x29, 0x3f, 0xc6, 0x51, 0x36, 0x4d, 0xef, 0x3d, 0xf7, 0x9c, 0xe6, 0x9c, 0x5b, 0xea,
	0x20, 0x4a, 0x6f, 0xd6, 0xf3, 0x42, 0x0d, 0x02, 0x12, 0x23, 0x83, 0xe9, 0x33, 0x9a, 0xc0, 0x64,
	0xe8, 0xa6, 0x5a, 0x19, 0xc5, 0x8e, 0xa3, 0x79, 0x0a, 0x1a, 0xe5, 0x38, 0x71, 0x11, 0xa5, 0x3b,
	0xeb, 0x9d, 0xb2, 0x2d, 0x23, 0xd5, 0x4a, 0x8d, 0x36, 0x53, 0xed, 0x25, 0xa1, 0xfc, 0x66, 0xaf,
	0xf0, 0x60, 0x05, 0x06, 0x2a, 0xcc, 0x62, 0x48, 0x0c, 0x6b, 0xd0, 0xb2, 0x14, 0x9c, 0xb4, 0x48,
	0xa7, 0xe6, 0x97, 0xa5, 0x60, 0x9c, 0x56, 0x35, 0xcc, 0xd4, 0x04, 0x04, 0x2f, 0xb7, 0x48, 0xe7,
	0xbf, 0xbf, 0x2b, 0xd9, 0x19, 0xad, 0x61, 0x86, 0x29, 0x24, 0x02, 0x04, 0xff, 0x63, 0xb1, 0xaf,
	0xc6, 0x86, 0x17, 0x07, 0x7a, 0x82, 0xfc, 0xaf, 0x15, 0xdb, 0x95, 0xec, 0x84, 0x56, 0x24, 0x62,
	0x06, 0x9a, 0xff, 0xb3, 0xc0, 0xb6, 0x62, 0x6d, 0x7a, 0x94, 0xdf, 0x82, 0x24, 0x84, 0x41, 0x60,
	0x80, 0x57, 0x2c, 0xfa, 0xad, 0xc7, 0x2e, 0x68, 0x23, 0x06, 0x3d, 0x99, 0x82, 0xaf, 0x94, 0xb9,
	0x0d, 0x30, 0xe2, 0x55, 0x3b, 0x55, 0xe8, 0xb6, 0xdf, 0x09, 0x6d, 0x16, 0x2d, 0xe6, 0x27, 0xb0,
	0x11, 0xe5, 0xe1, 0x01, 0xef, 0xd6, 0x75, 0xbd, 0x7f, 0xe9, 0x16, 0x53, 0x74, 0x0f, 0xa5, 0xe5,
	0x1f, 0xd4, 0x62, 0x8f, 0xb4, 0x59, 0xc4, 0xee, 0xf3, 0x1d, 0xd8, 0x14, 0xeb, 0xfd, 0xf3, 0x9f,
	0x8f, 0xec, 0xa8, 0x76, 0xcc, 0xff, 0x9d, 0x7d, 0x7d, 0xf7, 0xb6, 0x72, 0xc8, 0x62, 0xe5, 0x90,
	0xe5, 0xca, 0x21, 0xaf, 0x6b, 0xa7, 0xb4, 0x58, 0x3b, 0xa5, 0x8f, 0xb5, 0x53, 0x7a, 0xea, 0x8f,
	0xa5, 0x89, 0xb2, 0xa1, 0x1b, 0xaa, 0xd8, 0xdb, 0x6b, 0x77, 0xed, 0xc6, 0x43, 0x35, 0xf5, 0x22,
	0x29, 0xba, 0x89, 0x12, 0xe0, 0xbd, 0x78, 0xf9, 0x97, 0x30, 0xf3, 0x14, 0x70, 0x58, 0xb1, 0xf0,
	0xd5, 0x67, 0x00, 0x00, 0x00, 0xff, 0xff, 0x11, 0x6f, 0x85, 0x46, 0x58, 0x02, 0x00, 0x00,
}

func (m *CredentialStatusDocument) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CredentialStatusDocument) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CredentialStatusDocument) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.MerkleRootHash) > 0 {
		i -= len(m.MerkleRootHash)
		copy(dAtA[i:], m.MerkleRootHash)
		i = encodeVarintCredentialStatus(dAtA, i, uint64(len(m.MerkleRootHash)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.IssuanceDate) > 0 {
		i -= len(m.IssuanceDate)
		copy(dAtA[i:], m.IssuanceDate)
		i = encodeVarintCredentialStatus(dAtA, i, uint64(len(m.IssuanceDate)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Issuer) > 0 {
		i -= len(m.Issuer)
		copy(dAtA[i:], m.Issuer)
		i = encodeVarintCredentialStatus(dAtA, i, uint64(len(m.Issuer)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Remarks) > 0 {
		i -= len(m.Remarks)
		copy(dAtA[i:], m.Remarks)
		i = encodeVarintCredentialStatus(dAtA, i, uint64(len(m.Remarks)))
		i--
		dAtA[i] = 0x22
	}
	if m.Suspended {
		i--
		if m.Suspended {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Revoked {
		i--
		if m.Revoked {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintCredentialStatus(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CredentialStatusState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CredentialStatusState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CredentialStatusState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CredentialStatusProof != nil {
		{
			size, err := m.CredentialStatusProof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCredentialStatus(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.CredentialStatusDocument != nil {
		{
			size, err := m.CredentialStatusDocument.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintCredentialStatus(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintCredentialStatus(dAtA []byte, offset int, v uint64) int {
	offset -= sovCredentialStatus(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CredentialStatusDocument) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovCredentialStatus(uint64(l))
	}
	if m.Revoked {
		n += 2
	}
	if m.Suspended {
		n += 2
	}
	l = len(m.Remarks)
	if l > 0 {
		n += 1 + l + sovCredentialStatus(uint64(l))
	}
	l = len(m.Issuer)
	if l > 0 {
		n += 1 + l + sovCredentialStatus(uint64(l))
	}
	l = len(m.IssuanceDate)
	if l > 0 {
		n += 1 + l + sovCredentialStatus(uint64(l))
	}
	l = len(m.MerkleRootHash)
	if l > 0 {
		n += 1 + l + sovCredentialStatus(uint64(l))
	}
	return n
}

func (m *CredentialStatusState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CredentialStatusDocument != nil {
		l = m.CredentialStatusDocument.Size()
		n += 1 + l + sovCredentialStatus(uint64(l))
	}
	if m.CredentialStatusProof != nil {
		l = m.CredentialStatusProof.Size()
		n += 1 + l + sovCredentialStatus(uint64(l))
	}
	return n
}

func sovCredentialStatus(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCredentialStatus(x uint64) (n int) {
	return sovCredentialStatus(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CredentialStatusDocument) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCredentialStatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CredentialStatusDocument: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CredentialStatusDocument: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredentialStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCredentialStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCredentialStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Revoked", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredentialStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Revoked = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Suspended", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredentialStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Suspended = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Remarks", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredentialStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCredentialStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCredentialStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Remarks = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Issuer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredentialStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCredentialStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCredentialStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Issuer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IssuanceDate", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredentialStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCredentialStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCredentialStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IssuanceDate = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerkleRootHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredentialStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCredentialStatus
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCredentialStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MerkleRootHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCredentialStatus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCredentialStatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CredentialStatusState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCredentialStatus
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CredentialStatusState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CredentialStatusState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialStatusDocument", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredentialStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCredentialStatus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCredentialStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CredentialStatusDocument == nil {
				m.CredentialStatusDocument = &CredentialStatusDocument{}
			}
			if err := m.CredentialStatusDocument.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CredentialStatusProof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCredentialStatus
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCredentialStatus
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCredentialStatus
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CredentialStatusProof == nil {
				m.CredentialStatusProof = &DocumentProof{}
			}
			if err := m.CredentialStatusProof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCredentialStatus(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCredentialStatus
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCredentialStatus(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCredentialStatus
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCredentialStatus
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCredentialStatus
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCredentialStatus
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCredentialStatus
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCredentialStatus
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCredentialStatus        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCredentialStatus          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCredentialStatus = fmt.Errorf("proto: unexpected end of group")
)
